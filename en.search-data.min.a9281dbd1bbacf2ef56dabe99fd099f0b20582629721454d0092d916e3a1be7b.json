[{"id":0,"href":"/visual_computing/docs/shortcodes/Taller-1/","title":"Taller 1","section":"Shortcodes","content":" Taller 1 # Objetivo # En este taller fortaleceremos conceptos de manipulación de píxeles para la modificación de una imagen mediante Kernels, reproduciremos ilusiones ópticas para familiarizarnos con P5.js y construiremos un visualizador de histogramas.\nTypes # Convoluciones 1. Convoluciones # Problem statement # Una convolucion sobre una imagen es un calculo matematico sobre un conjunto de pixeles sobre la misma, esta operacion hace uso de los denominados Kernel; Un kernel es una matriz con valores determinados los cuales permiten aplicar diferentes mascaras sobre las imagenes, los valores dentro de las matrices de los kernel se pueden alterar con base en el resultado que se desee obtener se pueden modificar. Histograma Histograma # Problem statement # Un histograma de imagen es una representación gráfica de la distribución tonal en una imagen digital. Para esto traza el número de píxeles para cada valor tonal de manera que al mirar el histograma de una imagen específica, un espectador podrá juzgar la distribución tonal completa de un vistazo. Tiene muchos usos entre ellos sirve dar al fotógrafo una mejor comprensión de los valores de brillo en una imagen. Ilusiones Taller 1 # Objetivo # En este taller fortaleceremos conceptos de manipulación de píxeles para la modificación de una imagen mediante Kernels, reproduciremos ilusiones ópticas para familiarizarnos con P5.js y construiremos un visualizador de histogramas. Types # Binding Movement Movimiento Enlazado # Problem statement # La presente ilusión muestra 4 líneas aparentemente moviéndose de forma independiente, sin embargo, al revisarlas de forma extensiva se puede notar que se mueven en pares ordenados paralelos. Lightness Lightness # Problem statement # Sería útil tener una herramienta que permita la manipulación de luminosidad de una imagen, y de esta manera poder aclarar imágenes oscuras para poder ver sus siluetas. Background # Manipulación de pixeles usando P5.js Uso de HSL Conversión entre HSL y RGB Code # Pasos dentro del código: Cargar la imagen a manipular y el botón de rango Dado un valor en el botón de rango, se aumenta la luminosidad de cada pixel en la imagen. Multiplicacion Rgb Multiplicación RGB # Problem statement # ¿Qué sucede si multiplicamos dos colores RGB? Code # Pasos dentro del código: Obtener los 2 valores RGB de la paleta Calcular su multiplicación y mostrarla en pantalla source code let backgroundColor; let color1, color2 function setup() { createCanvas(200, 200); let c1 = createInput(\u0026#34;0,0,0\u0026#34;,\u0026#39;color\u0026#39;) let c2 = createInput(\u0026#34;0,0,0\u0026#34;,\u0026#39;color\u0026#39;) c1.input(()=\u0026gt; setColor1(c1,c2)) c2.input(()=\u0026gt; setColor1(c1,c2)) } function setColor1(c1,c2){ let color1 = color(red(c1.value()), green(c1.value()), blue(c1.value())) let black = color(0,0,0) fill(color1) rect(0,0, 130,130) let color2 = color(red(c2. "},{"id":1,"href":"/visual_computing/docs/shortcodes/Taller-1/Convoluciones/","title":"Convoluciones","section":"Taller 1","content":" 1. Convoluciones # Problem statement # Una convolucion sobre una imagen es un calculo matematico sobre un conjunto de pixeles sobre la misma, esta operacion hace uso de los denominados Kernel; Un kernel es una matriz con valores determinados los cuales permiten aplicar diferentes mascaras sobre las imagenes, los valores dentro de las matrices de los kernel se pueden alterar con base en el resultado que se desee obtener se pueden modificar.\nSe desea una aplicacion web que pueda aplicar diferentes convoluciones a una imagen. Background # La operacion de convolucion se define como:\n\\[g(x,y)=\\omega *f(x,y)=\\sum _{dx=-a}^{a}{\\sum _{dy=-b}^{b}{\\omega (dx,dy)f(x-dx,y-dy)}}\\] Sin embargo, se puede definir mas facilmente si se utiliza el kernel como un vector 1-dimensional asi. Con este vector, se toman los 4 canales R,G,B,A y se separan en vectores que puedan operarse de manera escalar, recordemos que el producto escalar entre dos vectores se define como;\n\\[u \\cdot v = u {\\displaystyle =u_{1}\\cdot v_{1}\u0026#43;u_{2}\\cdot v_{2}\u0026#43;...\u0026#43;u_{n}\\cdot v_{n}} {\\displaystyle =u_{1}\\cdot v_{1}\u0026#43;u_{2}\\cdot v_{2}\u0026#43;...\u0026#43;u_{n}\\cdot v_{n}},\\] Precaucion\nAl operar la imagen se deben tener en cuenta la inexistencia de pixeles externos, si se aplicara la convolucion donde el centro del kernel se ubica sobre el primer pixel, habran posiciones que no esten definidas por lo cual hay dos posibles alternativas.\nOperar desde el pixel (1,1) Operar desde el pixel (0,0) pero reescribiendo toda la imagen añadiendo pixeles de valor 0 al rededor de la imagen; ¿Como interactuar con la ilusión?\nPara cambiar los efectos sobre la imagen hay de usar el Slider para seleccionar uno de los kernels, ya despues de seleccionado se debe presionar el boton Recargar canvas. Kernels disponibles\nName Matrix Identity [0, 0, 0, 0, 1, 0, 0, 0, 0] Sharpen [0, -1, 0, -1, 5, -1, 0, -1, 0] Box Blur [1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9] Edge Detection [-1, -1, -1, -1, 8, -1, -1, -1, -1] Gaussian Blur [1, 2, 1, 2, 4, 2, 1, 2, 1] Emboss [-2, -1, 0, -1, 1, 1, 0, 1, 2] Bottom Sobel [-1,2,-1,0,0,0,1,2,1] Outline [-1,-1,-1,-1,8,-1,-1,-1,-1] Top Sobel [1,2,1,0,0,0,-1,-2,-1 Code # CODIGO: Convoluciones Codigo generado usando el editor web de P5.js.\nvar img,kernel; let channelsMap,RedMat,BlueMat,GreenMat,newChannels,fMap; function preload() { img = loadImage(\u0026#39;/showcase/sketches/bubbleCatC.png\u0026#39;); } function setup() { createCanvas(600,600); noLoop(); //Boton de Recarga button = createButton(\u0026#39;Recargar Canvas\u0026#39;); button.position(10, 10); button.mousePressed(reload); //Cambiar el kernel slider = createSlider(1, 9, 1, 1); slider.position(200, 10); slider.style(\u0026#39;width\u0026#39;, \u0026#39;120px\u0026#39;); } //Calcular el producto punto function ppunto(Pix,Ker){ let sum = 0; for(let x = 0;x \u0026lt; Ker.length;x++){ sum = sum + (Pix[x]*Ker[x]) } return sum; } //Dividimos los canales en arreglos individuales function ChannelDivider(ImgArr){ let imgRed = [], imgGreen = [], imgBlue = [], imgAlpha = []; for(let i = 0; i \u0026lt; ImgArr.length ; i+=4){ imgRed.push(ImgArr[i]); imgGreen.push(ImgArr[i+1]); imgBlue.push(ImgArr[i+2]); imgAlpha.push(ImgArr[i+3]); } return [imgRed,imgGreen,imgBlue,imgAlpha] } //Recomponer la imagen function ChannelComposer(R,G,B,A){ let imageChannels = []; for(let i = 0; i \u0026lt; A.length*4 ; i+=4){ imageChannels[i] = R[i/4]; imageChannels[i+1] = G[i/4]; imageChannels[i+2] = B[i/4]; imageChannels[i+3] = A[i/4]; } return imageChannels; } //separar los arreglos para hacer una matriz function ArraySplice(arr,dim){ var matrix = [], i, k; for (i = 0, k = -1; i \u0026lt; arr.length; i++) { if (i % dim === 0) { k++; matrix[k] = []; } matrix[k].push(arr[i]); } return matrix; } //Reescribir el arreglo como matriz function dimensioner(LTM){ var extended = []; for(let r = 0; r \u0026lt; LTM.length ; r++){ for(let c = 0; c \u0026lt; LTM[r].length; c++){ //Si estoy en el primer pixel if(r==0 \u0026amp;\u0026amp; c==0){ extended.push( [0,0,0, 0,LTM[r][c],LTM[r][c+1], 0,LTM[r+1][c],LTM[r+1][c+1]] ); }else //si estoy en la primer fila if(r==0 \u0026amp;\u0026amp; (c\u0026gt;0 \u0026amp;\u0026amp; c!=LTM[r].length - 1)){ extended.push( [0,0,0, LTM[r][c-1],LTM[r][c],LTM[r][c+1], LTM[r+1][c-1],LTM[r+1][c],LTM[r+1][c+1]] ); }else //Si estoy en el el ultimo pixel de una fila if(r==0 \u0026amp;\u0026amp; c==LTM[r].length - 1){ extended.push( [0,0,0, LTM[r][c-1],LTM[r][c],0, LTM[r+1][c-1],LTM[r+1][c],0] ); }else //si estoy en el primer pixel de una columna if((r\u0026gt;0 \u0026amp;\u0026amp; r\u0026lt;LTM[r].length-1) \u0026amp;\u0026amp; c==0){ extended.push( [0,LTM[r-1][c],LTM[r-1][c+1], 0,LTM[r][c],LTM[r][c+1], 0,LTM[r+1][c],LTM[r+1][c+1]] ); }else //si estoy en el ultimo pixel de una columna y no es la ultima fila if((r\u0026gt;0 \u0026amp;\u0026amp; r\u0026lt;LTM[r].length-1) \u0026amp;\u0026amp; c==LTM[r].length-1){ extended.push( [LTM[r-1][c-1],LTM[r-1][c],0, LTM[r][c-1],LTM[r][c],0, LTM[r+1][c-1],LTM[r+1][c],0] ); }else //si estoy en el primer pixel de la ultima fila if(r==LTM[r].length-1 \u0026amp;\u0026amp; c==0){ extended.push( [0,LTM[r-1][c],LTM[r-1][c+1], 0,LTM[r][c],LTM[r][c+1], 0,0,0] ); }else //si estoy en la ultima fila if(r==LTM.length-1 \u0026amp;\u0026amp; (c\u0026gt;0 \u0026amp;\u0026amp; c \u0026lt;LTM[r].length - 1)){ extended.push( [LTM[r-1][c-1],LTM[r-1][c],LTM[r-1][c+1], LTM[r][c-1],LTM[r][c],LTM[r][c+1], 0,0,0] ); }else //si estoy en el ultimo pixel if(r==LTM.length -1 \u0026amp;\u0026amp; c==LTM[r].length - 1){ extended.push( [LTM[r-1][c-1],LTM[r-1][c],0, LTM[r][c-1],LTM[r][c],0, 0,0,0] ); } else{ //los demas pixeles extended.push([LTM[r-1][c-1],LTM[r-1][c],LTM[r-1][c+1], LTM[r][c-1],LTM[r][c],LTM[r][c+1], LTM[r+1][c-1],LTM[r+1][c],LTM[r+1][c+1]]) } } } return extended; } //Calculo de la convolucion function Convolution(mat,ker,w){ let conv = []; for(let i = 0; i \u0026lt; mat.length; i++){ let p = ppunto(mat[i].reverse(),ker); conv.push(p); } return conv; } //Calculo del la imagen con el nuevo function CoreCalc(kernel,pix, width){ //Creamos el espacio para todos los canales tras la convolucion newChannels = [[],[],[]]; //Asignamos todos los canales channelsMap = ChannelDivider(pix); //Transformamos cada canal en una matriz para el dimensionamiento; RedMat = ArraySplice(channelsMap[0],width); GreenMat = ArraySplice(channelsMap[1],width); BlueMat = ArraySplice(channelsMap[2],width); //Se Crea el arreglo adecuado para cada matriz let RT,GT,BT; RT = dimensioner(RedMat); GT = dimensioner(GreenMat); BT = dimensioner(BlueMat); //Aplicamos el kernel a cada canal newChannels[0] = Convolution(RT,kernel,width); newChannels[1] = Convolution(GT,kernel,width); newChannels[2] = Convolution(BT,kernel,width); let fMap = ChannelComposer(newChannels[0],newChannels[1],newChannels[2],channelsMap[3]); return fMap; } //Funcion de recarga function reload(){ clear(); redraw() } const kernels = { identity: [0, 0, 0, 0, 1, 0, 0, 0, 0], sharpen: [0, -1, 0, -1, 5, -1, 0, -1, 0], boxBlur: [1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9], edgeDetection: [-1, -1, -1, -1, 8, -1, -1, -1, -1], gaussianBlur: [1, 2, 1, 2, 4, 2, 1, 2, 1], emboss: [-2, -1, 0, -1, 1, 1, 0, 1, 2], bottomSobel: [-1,2,-1,0,0,0,1,2,1], outline: [-1,-1,-1,-1,8,-1,-1,-1,-1], topSobel: [1,2,1,0,0,0,-1,-2,-1] }; function draw() { background(220); //image(img, 10, 10); img.loadPixels(); let d = img.width; //Cambiar los canvas if (slider.value() == 1) { kernel = kernels.identity; //restaurar } else if (slider.value() == 2) { kernel = kernels.sharpen; //definir } else if (slider.value() == 3) { kernel = kernels.boxBlur; //blur cuadrado } else if (slider.value() == 4) { kernel = kernels.emboss //viselar } else if (slider.value() == 5) { kernel = kernels.gaussianBlur //blur gaussiano } else if (slider.value() == 6) { kernel = kernels.bottomSobel } else if (slider.value() == 7) { kernel = kernels.topSobel } else if (slider.value() == 8) { kernel = kernels.outline } else { kernel = kernels.edgeDetection; //deteccion de bordes fuerte } let finalMap = CoreCalc(kernel,img.pixels,d); let imgs = createImage(img.width, img.height); imgs.loadPixels() for(let i = 0;i \u0026lt; img.pixels.length;i++){ imgs.pixels[i] = finalMap[i]; } imgs.updatePixels(); image(imgs, 0, 0); } Conclusions # El ejercicio es bastante complejo debido a las limitantes que existen al momento del renderizado, Sin embargo la manipulacion matematica de la imagen permite un acercamiento practico a funciones utilizadas por editores graficos lo cual permite entender que procesos se realizan bajo las interfaces para poder obtener resultados.\n"},{"id":2,"href":"/visual_computing/docs/shortcodes/Taller-1/Histograma/","title":"Histograma","section":"Taller 1","content":" Histograma # Problem statement # Un histograma de imagen es una representación gráfica de la distribución tonal en una imagen digital. Para esto traza el número de píxeles para cada valor tonal de manera que al mirar el histograma de una imagen específica, un espectador podrá juzgar la distribución tonal completa de un vistazo.\nTiene muchos usos entre ellos sirve dar al fotógrafo una mejor comprensión de los valores de brillo en una imagen.\nBackground # Un histograma es una representación de la distribución de datos numericos, este fue creado por Karl Pearson. Este tiene 2 ejes x y y, el primero contiene eventos cuya frecuencia debe contar y el otro contiene la frecuencia.\nCode # CODIGO: Histograma Codigo generado usando el editor web de P5.js.\nvar img; var maxRange = 256; var histogram = new Array(maxRange); function preload() { img = loadImage(\u0026#34;/visual_computing/sketches/einstein.jpg\u0026#34;); // Load the image } function setup() { createCanvas(img.width, img.height+10); background(255); img.resize(0,400); colorMode(HSL, maxRange); image(img, 0, 0); for (i = 0; i \u0026lt;= maxRange; i++) { histogram[i] = 0 } transform_rgb(); construir_histograma(); } function construir_histograma(){ image(img, 0, 0); stroke(300,100,80) push() translate(10,0) for (x = 0; x \u0026lt;= maxRange; x++) { index = histogram[x]; y1=int(map(index, 0, max(histogram), img.height, img.height-200)); y2 = img.height xPos = map(x,0,maxRange,0, img.width-20) stroke(\u0026#39;red\u0026#39;); line(xPos, y1, xPos, y2); } pop() } function transform_rgb(){ loadPixels(); for (var x = 0; x \u0026lt; img.width; x+=5) { for (var y = 0; y \u0026lt; img.height; y+=5) { var loc = (x + y * img.width) * 4; var h = pixels[loc]; var s = pixels[loc + 1]; var l = pixels[loc + 2]; var a = pixels[loc + 3]; b = int(l); histogram[b]++ } } } //Bibliografia: https://editor.p5js.org/ebenjmuse/sketches/HyPfeGkCZ Conclusions # El ejercicio es bastante complejo debido a que debe adaptarse a cualquier imagen, pero es un analisis muy util de la imagen ya que con un solo vistazo se sabe cual es la tendencia de los colores.\n"},{"id":3,"href":"/visual_computing/docs/shortcodes/Taller-1/Ilusiones/","title":"Ilusiones","section":"Taller 1","content":" Taller 1 # Objetivo # En este taller fortaleceremos conceptos de manipulación de píxeles para la modificación de una imagen mediante Kernels, reproduciremos ilusiones ópticas para familiarizarnos con P5.js y construiremos un visualizador de histogramas.\nTypes # Binding Movement Movimiento Enlazado # Problem statement # La presente ilusión muestra 4 líneas aparentemente moviéndose de forma independiente, sin embargo, al revisarlas de forma extensiva se puede notar que se mueven en pares ordenados paralelos. La figura que describe este movimiento corresponde a un rombo el cual posee sus vértices ocultos; Al hacer que los vértices sean visibles se puede notar como el tenerlos ocultos crea el movimiento ilusorio. ¿Como interactuar con la ilusión? Ske Efecto esteroquinético # Problem statement # El efecto esteroquinético es una ilusión visual de la profundidad. Es un efecto ilusorio que depende del movimiento. Se basa en que la rotación de figuras adecuadas crea una ilusión tridimensional Code # Pasos dentro del código: Dibujar el primer circulo Iterar por cada círculo definiendo su rotación y su posición. source code let angle = 0; let speed = 0.05; let circleColor = true; function setup() { createCanvas(400, 400); } function draw() { background(220); angle += speed; strokeWeight(1) circle(200,200,400); cirrcle(375) } function cirrcle(size){ fill(255,255,0) if(circleColor){ fill(0,0,255) } circleColor = ! Stepping Feet Paso a paso # Problem statement # Tambien llamada Stepping feet, es una ilusión visual de percepción de movimiento. Esta muestra dos pies, uno azul y otro amarillo, que se mueven horizontalmente a través de un paisaje que consta de rayas blancas y negras. Aunque ambos pies se mueven a una velocidad constante, su velocidad percibida es distinta. ¿Como interactuar con la ilusión? Para cambiar la velocidad de las figuras se usa el primer slider, para cambiar la relación baras/pie se usa el segundo slider y para mover o detener los pies se debe clickear la casilla de move. "},{"id":4,"href":"/visual_computing/docs/shortcodes/Taller-1/Ilusiones/BindingMovement/","title":"Binding Movement","section":"Ilusiones","content":" Movimiento Enlazado # Problem statement # La presente ilusión muestra 4 líneas aparentemente moviéndose de forma independiente, sin embargo, al revisarlas de forma extensiva se puede notar que se mueven en pares ordenados paralelos. La figura que describe este movimiento corresponde a un rombo el cual posee sus vértices ocultos;\nAl hacer que los vértices sean visibles se puede notar como el tenerlos ocultos crea el movimiento ilusorio.\n¿Como interactuar con la ilusión?\nPara visibilizar las figuras que desmontan la ilusión es necesario marcar el checkbox \u0026ldquo;Visible\u0026rdquo; , el Slider que se encuentra permite cambiar la visibilidad \u0026ldquo;Alpha\u0026rdquo; de las figuras. Code # CODIGO: Movimiento Enlazado Codigo generado usando el editor web de P5.js.\nlet bgColor = 200, checkbox; function setup() { createCanvas(600,600); angleMode(DEGREES); rectMode(CENTER); //transparency slider = createSlider(20, 255, 100); slider.position(10, 10); slider.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); //Squares Transparency checkbox = createCheckbox(\u0026#39;Visible\u0026#39;, false); checkbox.position(10,40); } function drawSquares(visible){ let xAxis = 150; let yAxis = 150; let size = 120; rotate(45); if(!checkbox.checked()){ fill(bgColor); noStroke() }else{ let alpha = slider.value(); fill(0,100,100,alpha); noStroke(); } rect(xAxis,-yAxis,size,size); rect(-xAxis,yAxis,size,size); rect(xAxis,yAxis,size,size); rect(-xAxis,-yAxis,size,size); } function mainSquare(){ translate(p5.Vector.fromAngle(millis()/500,40)); let bSize = 300; rotate(45); fill(bgColor) stroke(0, 0, 255); strokeWeight(6); rect(0,0,bSize,bSize); } function draw() { background(bgColor); translate(width/2,height/2); push(); mainSquare(); pop(); drawSquares(false); } Conclusions # Para el ojo inexperto el movimiento puede resultar complejo ya que la ilusion cumple con el objetivo y de primera mano da a enter que tras ella se requieren calculos y codigos complejos para obtener la sincronizacion. Sin embargo, el desarrollo del ejercicio permite entender como la manipulacion geometrica y de factores como perspectiva y velocidad permiten generar animaciones complejas.\n"},{"id":5,"href":"/visual_computing/docs/shortcodes/Taller-1/Ilusiones/SKE/","title":"Ske","section":"Ilusiones","content":" Efecto esteroquinético # Problem statement # El efecto esteroquinético es una ilusión visual de la profundidad. Es un efecto ilusorio que depende del movimiento. Se basa en que la rotación de figuras adecuadas crea una ilusión tridimensional\nCode # Pasos dentro del código:\nDibujar el primer circulo Iterar por cada círculo definiendo su rotación y su posición. source code let angle = 0; let speed = 0.05; let circleColor = true; function setup() { createCanvas(400, 400); } function draw() { background(220); angle += speed; strokeWeight(1) circle(200,200,400); cirrcle(375) } function cirrcle(size){ fill(255,255,0) if(circleColor){ fill(0,0,255) } circleColor = !circleColor if(size\u0026gt;100){ translate(p5.Vector.fromAngle(millis() / 1000, 12.5)); strokeWeight(0) circle(200,200, size); cirrcle(size-25) }else if(size\u0026gt;0){ translate(p5.Vector.fromAngle(millis() / 1000, -12.5)); circle(200,200, size); cirrcle(size-25) } return } Conclusions # Es una manera muy interesante de crear la ilusión de la tercera dimensión, estos conceptos van encaminados hacia la creación de gráficas en 3D.\n"},{"id":6,"href":"/visual_computing/docs/shortcodes/Taller-1/Ilusiones/SteppingFeet/","title":"Stepping Feet","section":"Ilusiones","content":" Paso a paso # Problem statement # Tambien llamada Stepping feet, es una ilusión visual de percepción de movimiento. Esta muestra dos pies, uno azul y otro amarillo, que se mueven horizontalmente a través de un paisaje que consta de rayas blancas y negras. Aunque ambos pies se mueven a una velocidad constante, su velocidad percibida es distinta.\n¿Como interactuar con la ilusión?\nPara cambiar la velocidad de las figuras se usa el primer slider, para cambiar la relación baras/pie se usa el segundo slider y para mover o detener los pies se debe clickear la casilla de move. Code # CODIGO: Paso a paso Codigo generado usando el editor web de P5.js.\nvar canvasWidth = 600; var canvasHeight = 400; var quantity = 2; var speed = 1; var positionXBar1 = 0; var positionYBar1 = canvasHeight / 3; var positionYBar2 = (2*canvasHeight) / 3; var widthBar = 80; var heightBar = 40; var colorBar1 = \u0026#39;yellow\u0026#39;; var colorBar2 = \u0026#39;blue\u0026#39;; var moveBarRight = true; var isMove = true; var sliderSpeed; function setup() { createCanvas(canvasWidth, canvasHeight); background(\u0026#39;white\u0026#39;); drawLayout(); } function draw() { drawBoard(); updateSpeed(); drawBar1(); drawBar2(); } function drawBoard(){ let position; quantity = sliderQuantity.value(); let realLines = (canvasWidth / widthBar) * quantity; let widthLine = widthBar / quantity; let numberLines = realLines % 2 == 0 ? realLines + 1 : realLines; for (let i = 0; i \u0026lt; numberLines; i++) { position = i * widthLine; if (i % 2 == 0) { fill(\u0026#39;black\u0026#39;); rect(position, 0, widthLine, canvasHeight); } else { strokeWeight(0) fill(\u0026#39;white\u0026#39;); rect(position, 0, widthLine, canvasHeight); } } } function drawBar1(){ fill(colorBar1); rect(positionXBar1, positionYBar1, widthBar, heightBar); if (moveBarRight) { positionXBar1 += speed; if (positionXBar1 + widthBar \u0026gt; canvasWidth) { moveBarRight = false; } } else { positionXBar1 -= speed; if (positionXBar1 \u0026lt;= 0) { moveBarRight = true; } } } function drawBar2() { fill(colorBar2); rect(positionXBar1, positionYBar2, widthBar, heightBar); if (moveBarRight) { positionXBar1 += speed; if (positionXBar1 + widthBar \u0026gt; canvasWidth) { moveBarRight = false; } } else { positionXBar1 -= speed; if (positionXBar1 \u0026lt;= 0) { moveBarRight = true; } } } function updateSpeed() { if (isMove) { speed = sliderSpeed.value(); } } function drawLayout() { //Reset button button = createButton(\u0026#39;Reset\u0026#39;); button.position(40, 440); button.mousePressed(() =\u0026gt; { canvasWidth = 600; canvasHeight = 400; quantity = 2; speed = 1; positionXBar1 = 0; positionYBar1 = canvasHeight / 3; positionXBar2 = 0; positionYBar2 = (2*canvasHeight) / 3; widthBar = 80; heightBar = 40; moveBarRight = true; }); //Move checkbox checkbox = createCheckbox(\u0026#39;Move\u0026#39;, isMove); checkbox.position(40, 470); checkbox.mousePressed(() =\u0026gt; { if (speed === 0) { isMove = true; speed = sliderSpeed.value(); } else { isMove = false; speed = 0; } }); //Slider speed sliderSpeed = createSlider(1, 10, 1); sliderSpeed.position(40, 500); sliderSpeed.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); //Slider quantity sliderQuantity = createSlider(1, 10, 1); sliderQuantity.position(40, 540); sliderQuantity.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); //Change color sel = createSelect(); sel.position(40, 580); sel.option(\u0026#39;blue-yellow\u0026#39;); sel.option(\u0026#39;red-green\u0026#39;); sel.option(\u0026#39;grey\u0026#39;); sel.selected(\u0026#39;kiwi\u0026#39;); sel.changed((value) =\u0026gt; { switch(value.target.value) { case \u0026#39;blue-yellow\u0026#39;: colorBar1 = \u0026#39;yellow\u0026#39; colorBar2 = \u0026#39;blue\u0026#39; break; case \u0026#39;red-green\u0026#39;: colorBar1 = \u0026#39;green\u0026#39; colorBar2 = \u0026#39;red\u0026#39; break; case \u0026#39;grey\u0026#39;: colorBar1 = \u0026#39;white\u0026#39; colorBar2 = \u0026#39;black\u0026#39; break; } }); } Conclusions # La clave de esta ilusión es el contraste, ya que cuando hay un mayor contraste entre el pie y el fondo, el pie se hace visible más facilmente y da una sensación de movimiento rapido mientras que cuando el contraste es bajo, el pie es más dificil de diferenciar del fondo y parecer ir más lento. Esta ilusió demuestra que el fondo de un objeto puede tener un efecto significativo en su velocidad percibida.\n"},{"id":7,"href":"/visual_computing/docs/shortcodes/Taller-1/Lightness/","title":"Lightness","section":"Taller 1","content":" Lightness # Problem statement # Sería útil tener una herramienta que permita la manipulación de luminosidad de una imagen, y de esta manera poder aclarar imágenes oscuras para poder ver sus siluetas.\nBackground # Manipulación de pixeles usando P5.js Uso de HSL Conversión entre HSL y RGB Code # Pasos dentro del código:\nCargar la imagen a manipular y el botón de rango Dado un valor en el botón de rango, se aumenta la luminosidad de cada pixel en la imagen.S source code new p5((p) =\u0026gt;{ let img; let myPixels; p.preload = function() { img = p.loadImage(\u0026#34;/showcase/sketches/medusa.jpeg\u0026#34;); } p.setup = function () { p.createCanvas(400, 400); let inp = p.createInput(\u0026#34;0\u0026#34;,\u0026#34;range\u0026#34;); inp.size(100); inp.input((e) =\u0026gt; handleBtn(e)); inp.position(0,p.height-20) p.image(img, 0, 0, p.width, p.height); p.colorMode(p.RGB) p.loadPixels(); myPixels = [...p.pixels] console.log(\u0026#34;myPixels\u0026#34;,myPixels[0]) } p.draw = function (){ } handleBtn= function(inp){ console.log(\u0026#34;inp\u0026#34;, inp.target.value) let d = p.pixelDensity(); let halfImage = 4 _ (p.width _ d) _ (p.height _ d); for (let i = 0; i \u0026lt; halfImage; i += 4) { let colorRGB = p.color(myPixels[i],myPixels[i+1], myPixels[i+2]) let hueValue = p.floor( p.hue(colorRGB) ); let saturationValue = p.saturation(colorRGB); let lightnessValue = p.lightness(colorRGB); let colorHSV = p.color(`hsl(${ hueValue }, ${ saturationValue }%, ${ (lightnessValue + parseFloat(inp.target.value))}%)`) p.pixels[i] = p.red(colorHSV); p.pixels[i + 1] = p.green(colorHSV); p.pixels[i + 2] = p.blue(colorHSV); p.pixels[i + 3] = p.alpha(colorHSV); } p.updatePixels(); console.log(\u0026#34;myPixels\u0026#34;,myPixels[0]) } handleImg = function(event){ console.log(\u0026#34;event.target\u0026#34;,event.target.value) p.loadImage(event.target.value, img2 =\u0026gt; { p.image(img2, 0, 0, p.width, p.height); }); } }) Conclusions # Esta forma de manipular los pixeles llega a buenos resultados en cuanto a la modificación de luminocidad, pero es costosa computacionalmente, sería interesante descubrir el trabajo que realizan programas como Photoshop para lograr una óptima manipulación sobre una imagen.\n"},{"id":8,"href":"/visual_computing/docs/shortcodes/Taller-1/Multiplicacion-RGB/","title":"Multiplicacion Rgb","section":"Taller 1","content":" Multiplicación RGB # Problem statement # ¿Qué sucede si multiplicamos dos colores RGB?\nCode # Pasos dentro del código:\nObtener los 2 valores RGB de la paleta Calcular su multiplicación y mostrarla en pantalla source code let backgroundColor; let color1, color2 function setup() { createCanvas(200, 200); let c1 = createInput(\u0026#34;0,0,0\u0026#34;,\u0026#39;color\u0026#39;) let c2 = createInput(\u0026#34;0,0,0\u0026#34;,\u0026#39;color\u0026#39;) c1.input(()=\u0026gt; setColor1(c1,c2)) c2.input(()=\u0026gt; setColor1(c1,c2)) } function setColor1(c1,c2){ let color1 = color(red(c1.value()), green(c1.value()), blue(c1.value())) let black = color(0,0,0) fill(color1) rect(0,0, 130,130) let color2 = color(red(c2.value()), green(c2.value()), blue(c2.value())) fill(color2) rect(70,70, 130,130) //let white = color(255,255,255) const cred = (red(c1.value()) * red(c2.value())) / 255; const cblue = (blue(c1.value()) * blue(c2.value())) / 255; const cgreen = (green(c1.value()) * green(c2.value())) /255; fill(color(cred, cgreen,cblue)) rect(70,70, 60,60) //background(cred,cgreen,cblue) } Conclusions # La multiplicación RGB, bajo algunos casos, hacer ver que cuadrados tienen una cierta transparencia, y que los colores se combinan.\n"},{"id":9,"href":"/visual_computing/docs/shortcodes/Taller-2/","title":"Taller 2","section":"Shortcodes","content":" Taller 2 # Objetivo # X\nAplicacion 3 D Aplicacion 3D # Objetivo # X Laberinto Laberinto 3-D # Problema # Implemente una aplicacion 3D con WebGL. Puede usar la libreria p5.treegl o cualquier otra libreria necesaria. Introduccion # Un laberinto es un lugar compuesto por un conjunto de calles y encrucijadas con una disposicion compleja. El Objetivo de los laberintos es confudir a quienes se adentren dentro del mismo. Historicamente, los laberintos han sido mencionados en la mitologia como retos para los heroes [\u0026ldquo;El laberinto de Creta\u0026rdquo;] asi mismo como una representacion artistica para la inteligencia y destreza. Rasterizacion Rasterizacion # Objetivo # X Midpoint Circle Algorithm Midpoint Circle Algorithm # El algoritmo de dibujo de círculo de punto medio es un algoritmo utilizado para determinar los puntos necesarios para rasterizar un círculo. Usamos el algoritmo del punto medio para calcular todos los puntos del perímetro del círculo en el primer octante y luego los imprimimos junto con sus puntos de espejo en los otros octantes. Esto funcionará porque un círculo es simétrico con respecto a su centro. "},{"id":10,"href":"/visual_computing/docs/shortcodes/Taller-2/Aplicacion-3-D/","title":"Aplicacion 3 D","section":"Taller 2","content":" Aplicacion 3D # Objetivo # X\nLaberinto Laberinto 3-D # Problema # Implemente una aplicacion 3D con WebGL. Puede usar la libreria p5.treegl o cualquier otra libreria necesaria. Introduccion # Un laberinto es un lugar compuesto por un conjunto de calles y encrucijadas con una disposicion compleja. El Objetivo de los laberintos es confudir a quienes se adentren dentro del mismo. Historicamente, los laberintos han sido mencionados en la mitologia como retos para los heroes [\u0026ldquo;El laberinto de Creta\u0026rdquo;] asi mismo como una representacion artistica para la inteligencia y destreza. Laberinto P2 Parte 2 # Colisiones y Creacion: Tomando lo creado en los ejercicios anteriores se crea un laberinto sencillo por el cual la esfera pueda desplazarse, se trata de simular fisicas como fuerzas Newtonianas para dar realismo a la aplicacion. ¿Como interactuar con el plano? Para cambiar la inclinacion debe deslizar el mouse presionando el boton de click derecho sobre el Canvas, la esfera puede salirse del plano y del area visible por lo cual puede usar el slider para ajustar el zoom o el boton central del mouse. "},{"id":11,"href":"/visual_computing/docs/shortcodes/Taller-2/Aplicacion-3-D/Laberinto/","title":"Laberinto","section":"Aplicacion 3 D","content":" Laberinto 3-D # Problema # Implemente una aplicacion 3D con WebGL. Puede usar la libreria p5.treegl o cualquier otra libreria necesaria.\nIntroduccion # Un laberinto es un lugar compuesto por un conjunto de calles y encrucijadas con una disposicion compleja. El Objetivo de los laberintos es confudir a quienes se adentren dentro del mismo. Historicamente, los laberintos han sido mencionados en la mitologia como retos para los heroes [\u0026ldquo;El laberinto de Creta\u0026rdquo;] asi mismo como una representacion artistica para la inteligencia y destreza.\nDesarrollo # Para poder Cumplir el objetivo de la aplicacion, se presenta el siguiente curso de acción tomado para el desarrollo.\nCrear los objetos con ayuda de P5.js. Migrar los objetos a p5.treegl . Inclinar un plano en 3D. Creacion de colisiones entre objetos. Mover un objeto sujeto al plano y sobre el plano. Induccion de fuerzas y mecanicas [Aceleracion,Gravedad]. Codigos # Colisiones y Movimiento sobre la inclinacion del plano: Haciendo uso de las libreria p5.treegl y los metodos nativos de p5, se consigue rotar un plano con base en el movimiento que dicte el cursor. Sobre este plano se encuentra una esfera la cual esta colisionando contra este. La esfera se movera sieguien el vector de rotacion y orientacion del plano. ¿Como interactuar con el plano?\nPara cambiar la inclinacion debe deslizar el mouse presionando el boton de click derecho sobre el Canvas. Para mover la esfera use las teclas \u0026ldquo;a\u0026rdquo; y \u0026ldquo;d\u0026rdquo;. CODIGO: Colisiones y Movimiento let planePosition, planeSize, planeColor, planeRotateV, planeMagnitudeR, planeMaxMagR; let spherePosition, sphereMoveVector, sphereRadius, maxVertex, minVertex; let fbo1, cam1, length = 600, boxes, box_key; let mouseInitialV, mouseCurrentV, fovy; const SPEED = 5; function createPlane() { planeMaxMagR = 25; planeColor = \u0026#34;black\u0026#34;; planeMagnitudeR = 0; planeRotateV = createVector(1, 0, 0); planeSize = createVector(100, 50, 0); //ancho y alto planePosition = createVector(0, 0, 0); } function createSphere() { sphereMoveVector = createVector(0, 1, 0); sphereRadius = 10; spherePosition = createVector(0, 0, sphereRadius); minVertex = createVector(-planeSize.x / 2, -planeSize.y / 2, 0); maxVertex = createVector(planeSize.x / 2, planeSize.y / 2, 0); } function setup() { createCanvas(length, length); fbo1 = createGraphics(width, height, WEBGL); // FBO camera cam1 = new Dw.EasyCam(fbo1._renderer, { distance: 200 }); let state1 = cam1.getState(); cam1.state_reset = state1; // state to use on reset (double-click/tap) cam1.setViewport([0, 0, width / 2, height]); document.oncontextmenu = function () { return false; }; //Interactive elements createPlane(); createSphere(); // scene interactions fovy = createSlider(PI / 12, PI * (11 / 12), PI / 3, PI / 48); fovy.position(10, 10); fovy.style(\u0026#34;width\u0026#34;, \u0026#34;80px\u0026#34;); } function draw() { //Background elements fbo1.background(120, 125, 115); fbo1.reset(); fbo1.perspective(fovy.value()); fbo1.axes(); fbo1.grid(); fbo1.rotate((PI / 100) * planeMagnitudeR, planeRotateV); //Dibujar el plano fbo1.push(); fbo1.fill(planeColor); fbo1.translate(planePosition); fbo1.plane(planeSize.x, planeSize.y); fbo1.pop(); //Dibujar la esfera fbo1.push(); fbo1.fill(\u0026#34;white\u0026#34;); fbo1.translate(spherePosition); fbo1.sphere(sphereRadius); fbo1.pop(); // movimiento de la esfera if (keyIsPressed \u0026amp;\u0026amp; key == \u0026#34;a\u0026#34;) { spherePosition = createVector( sphereMoveVector.x * 2 + spherePosition.x, sphereMoveVector.y * 2 + spherePosition.y, sphereMoveVector.z * 2 + spherePosition.z ); //spherePosition.z += 1 } else if (keyIsPressed \u0026amp;\u0026amp; key == \u0026#34;d\u0026#34;) { spherePosition = createVector( sphereMoveVector.x * -2 + spherePosition.x, sphereMoveVector.y * -2 + spherePosition.y, sphereMoveVector.z * -2 + spherePosition.z ); } //Colisión if ( spherePosition.x \u0026gt;= minVertex.x \u0026amp;\u0026amp; spherePosition.y \u0026gt;= minVertex.y \u0026amp;\u0026amp; spherePosition.z - 10 \u0026gt;= minVertex.z \u0026amp;\u0026amp; spherePosition.x \u0026lt;= maxVertex.x \u0026amp;\u0026amp; spherePosition.y \u0026lt;= maxVertex.y \u0026amp;\u0026amp; spherePosition.z - 10 \u0026lt;= maxVertex.z ) { planeColor = \u0026#34;white\u0026#34;; } else { planeColor = \u0026#34;black\u0026#34;; } beginHUD(); image(fbo1, 0, 0); endHUD(); } function getVectorModule(vector) { return Math.sqrt(vector.x ** 2 + vector.y ** 2 + vector.z ** 2); } function mousePressed() { mouseInitialV = createVector(mouseX, mouseY, 0); } function mouseDragged() { mouseCurrentV = createVector(mouseX, mouseY, 0); let vectorSubstra = createVector( mouseInitialV.x - mouseCurrentV.x, mouseInitialV.y - mouseCurrentV.y, mouseInitialV.z - mouseCurrentV.z ); let mod = getVectorModule(vectorSubstra); let vectorDir = createVector( vectorSubstra.x / mod, vectorSubstra.y / mod, vectorSubstra.z / mod ); sphereMoveVector = createVector(vectorDir.x, vectorDir.y, vectorDir.z); let aux = vectorDir.x; vectorDir.x = vectorDir.y; vectorDir.y = -aux; if (mod \u0026lt; planeMaxMagR) { planeMagnitudeR = mod; } planeRotateV = vectorDir; } # Aceleracion: Con base en el ejercicio anterior, ahora la esfera se deplaza sujeta al plano pero con una aceleracion de caracter oscilatorio dado por la funcion Seno. ¿Como interactuar con el plano?\nPara cambiar la inclinacion debe deslizar el mouse presionando el boton de click derecho sobre el Canvas, la esfera puede salirse del plano y del area visible por lo cual puede usar el slider para ajustar el zoom o el boton central del mouse. CODIGO: Aceleracion let fbo1, cam1, fovy; let P, B; let mouseInitialV, mouseCurrentV; function Plane() { this.planeMaxMagR = 25; this.planeColor = \u0026#34;black\u0026#34;; this.planeMagnitudeR = 0; this.planeRotateV = createVector(1, 0, 0); this.planeSize = createVector(100, 100, 0); //ancho y alto this.planePosition = createVector(0, 0, 0); this.draw = function (fbo) { fbo.push(); fbo.fill(this.planeColor); fbo.translate(this.planePosition); fbo.plane(this.planeSize.x, this.planeSize.y); fbo.pop(); }; } function Ball(P) { this.sphereMoveVector = createVector(0, 0, 0); this.acceleration = createVector(0, 0, 0); this.sphereRadius = 10; this.spherePosition = createVector(0, 0, this.sphereRadius); this.minVertex = createVector(-P.planeSize.x / 2, -P.planeSize.y / 2, 0); this.maxVertex = createVector(P.planeSize.x / 2, P.planeSize.y / 2, 0); this.draw = function (fbo) { fbo.push(); fbo.fill(\u0026#34;white\u0026#34;); fbo.translate(this.spherePosition); fbo.sphere(this.sphereRadius); fbo.pop(); }; } function setup() { createCanvas(600, 600); fbo1 = createGraphics(width, height, WEBGL); // FBO camera cam1 = new Dw.EasyCam(fbo1._renderer, { distance: 200 }); let state1 = cam1.getState(); cam1.state_reset = state1; // state to use on reset (double-click/tap) cam1.setViewport([0, 0, width / 2, height]); document.oncontextmenu = function () { return false; }; // scene interactions fovy = createSlider(PI / 12, PI * (11 / 12), PI / 3, PI / 48); fovy.position(10, 10); fovy.style(\u0026#34;width\u0026#34;, \u0026#34;80px\u0026#34;); P = new Plane(); B = new Ball(P); } function draw() { fbo1.background(120, 125, 115); fbo1.reset(); fbo1.perspective(fovy.value()); fbo1.axes(); fbo1.grid(); fbo1.rotate((PI / 180) * P.planeMagnitudeR, P.planeRotateV); fbo1.strokeWeight(0.5); P.draw(fbo1); B.draw(fbo1); // movimiento de la esfera if (P.planeRotateV.x != 0 || P.planeRotateV.y != 0) { B.sphereMoveVector.x = B.acceleration.x * 0.15 + B.sphereMoveVector.x; B.sphereMoveVector.y = B.acceleration.y * 0.15 + B.sphereMoveVector.y; B.spherePosition.x = B.sphereMoveVector.x * 0.15 + B.spherePosition.x; B.spherePosition.y = B.sphereMoveVector.y * 0.15 + B.spherePosition.y; } else if (P.planeRotateV.x == 0 \u0026amp;\u0026amp; P.planeRotateV.y == 0) { B.sphereMoveVector = createVector(0, 0, 0); B.acceleration = createVector(0, 0, 0); } //Colisión if ( B.spherePosition.x \u0026gt;= B.minVertex.x \u0026amp;\u0026amp; B.spherePosition.y \u0026gt;= B.minVertex.y \u0026amp;\u0026amp; B.spherePosition.z - 10 \u0026gt;= B.minVertex.z \u0026amp;\u0026amp; B.spherePosition.x \u0026lt;= B.maxVertex.x \u0026amp;\u0026amp; B.spherePosition.y \u0026lt;= B.maxVertex.y \u0026amp;\u0026amp; B.spherePosition.z - 10 \u0026lt;= B.maxVertex.z ) { P.planeColor = \u0026#34;white\u0026#34;; } else { P.planeColor = \u0026#34;black\u0026#34;; } beginHUD(); image(fbo1, 0, 0); endHUD(); } function getVectorModule(vector) { return Math.sqrt(vector.x ** 2 + vector.y ** 2 + vector.z ** 2); } function mousePressed() { mouseInitialV = createVector(mouseX, mouseY, 0); } function mouseDragged() { mouseCurrentV = createVector(mouseX, mouseY, 0); let vectorSubstra = createVector( mouseInitialV.x - mouseCurrentV.x, mouseInitialV.y - mouseCurrentV.y, mouseInitialV.z - mouseCurrentV.z ); let mod = getVectorModule(vectorSubstra); let vectorDir = createVector( vectorSubstra.x / mod, vectorSubstra.y / mod, vectorSubstra.z / mod ); let sine = sqrt(1 - sq(vectorDir.z)); B.acceleration = createVector( -sine * vectorDir.x, -sine * vectorDir.y, sine * vectorDir.z ); let aux = vectorDir.x; vectorDir.x = vectorDir.y; vectorDir.y = -aux; if (mod \u0026lt; P.planeMaxMagR) { P.planeMagnitudeR = mod; } P.planeRotateV = vectorDir; P.planeRotateV.z = 0; } "},{"id":12,"href":"/visual_computing/docs/shortcodes/Taller-2/Aplicacion-3-D/LaberintoP2/","title":"Laberinto P2","section":"Aplicacion 3 D","content":" Parte 2 # Colisiones y Creacion: Tomando lo creado en los ejercicios anteriores se crea un laberinto sencillo por el cual la esfera pueda desplazarse, se trata de simular fisicas como fuerzas Newtonianas para dar realismo a la aplicacion. ¿Como interactuar con el plano? Para cambiar la inclinacion debe deslizar el mouse presionando el boton de click derecho sobre el Canvas, la esfera puede salirse del plano y del area visible por lo cual puede usar el slider para ajustar el zoom o el boton central del mouse. CODIGO: Aceleracion function Ball(P){ this.sphereMoveVector = createVector(0,0,0); this.acceleration = createVector(0,0,0) this.sphereRadius = 7; this.spherePosition = createVector(92.5-38*4.5,38*-1,this.sphereRadius); this.minVertex = createVector(-P.planeSize.x/2,-P.planeSize.y/2,0); this.maxVertex = createVector(P.planeSize.x/2,P.planeSize.y/2,0); this.draw = function(fbo){ fbo.push(); fbo.fill(\u0026#34;rgb(0, 0, 0)\u0026#34;); fbo1.noStroke(); fbo.translate(this.spherePosition); fbo.sphere(this.sphereRadius) fbo.pop() } this.move = function(P, acceleration, factorAcc, isAcelerate){ if(P.planeRotateV.x != 0 || P.planeRotateV.y != 0){ if(isAcelerate){ this.sphereMoveVector.x = (acceleration.x*factorAcc)*isAcelerate; this.sphereMoveVector.y = (acceleration.y*factorAcc)*isAcelerate; this.spherePosition.x = (this.sphereMoveVector.x*factorAcc) + this.spherePosition.x this.spherePosition.y = (this.sphereMoveVector.y*factorAcc) + this.spherePosition.y; } else{ this.sphereMoveVector.x = (acceleration.x*factorAcc) + this.sphereMoveVector.x; this.sphereMoveVector.y = (acceleration.y*factorAcc) + this.sphereMoveVector.y; this.spherePosition.x = (this.sphereMoveVector.x*factorAcc) + this.spherePosition.x this.spherePosition.y = (this.sphereMoveVector.y*factorAcc) + this.spherePosition.y; } }else if(P.planeRotateV.x == 0 \u0026amp;\u0026amp; P.planeRotateV.y == 0){ this.sphereMoveVector = createVector(0,0,0); this.acceleration = createVector(0,0,0); } // if(P.planeRotateV.x != 0 || P.planeRotateV.y != 0){ // B.sphereMoveVector.x = (B.acceleration.x*0.1) + B.sphereMoveVector.x; // B.sphereMoveVector.y = (B.acceleration.y*0.1) + B.sphereMoveVector.y; // B.spherePosition.x = (B.sphereMoveVector.x*0.1) + B.spherePosition.x // B.spherePosition.y = (B.sphereMoveVector.y*0.1) + B.spherePosition.y; // }else if(P.planeRotateV.x == 0 \u0026amp;\u0026amp; P.planeRotateV.y == 0){ // B.sphereMoveVector = createVector(0,0,0); // B.acceleration = createVector(0,0,0); // } } } \u0026#39;use strict\u0026#39;; // See: // https://github.com/processing/p5.js/blob/main/contributor_docs/creating_libraries.md // https://github.com/processing/p5.js/blob/main/src/core/README.md // https://github.com/processing/p5.js/blob/main/contributor_docs/webgl_mode_architecture.md /** @namespace */ var Tree = (function (ext) { const INFO = { LIBRARY: \u0026#39;p5.treegl\u0026#39;, VERSION: \u0026#39;0.3.0\u0026#39;, HOMEPAGE: \u0026#39;https://github.com/VisualComputing/p5.treegl\u0026#39; }; Object.freeze(INFO); const NONE = 0; // Axes consts const X = 1 \u0026lt;\u0026lt; 0; const Y = 1 \u0026lt;\u0026lt; 1; const Z = 1 \u0026lt;\u0026lt; 2; const _X = 1 \u0026lt;\u0026lt; 3; const _Y = 1 \u0026lt;\u0026lt; 4; const _Z = 1 \u0026lt;\u0026lt; 5; const LABELS = 1 \u0026lt;\u0026lt; 6; // grid style const SOLID = 0; const DOTS = 1 // bullseye and picking shape const SQUARE = 0; const CIRCLE = 1; // only picking shape const PROJECTION = 2; // Frustum consts const NEAR = 1 \u0026lt;\u0026lt; 0; const FAR = 1 \u0026lt;\u0026lt; 1; const LEFT = 1 \u0026lt;\u0026lt; 2; const RIGHT = 1 \u0026lt;\u0026lt; 3; const BOTTOM = 1 \u0026lt;\u0026lt; 4; const TOP = 1 \u0026lt;\u0026lt; 5; const BODY = 1 \u0026lt;\u0026lt; 6; // visibility const INVISIBLE = 0; const VISIBLE = 1; const SEMIVISIBLE = 2; // spaces const WORLD = \u0026#39;WORLD\u0026#39;; const EYE = \u0026#39;EYE\u0026#39;; const NDC = \u0026#39;NDC\u0026#39;; const SCREEN = \u0026#39;SCREEN\u0026#39;; const MODEL = \u0026#39;MODEL\u0026#39;; // points const ORIGIN = [0, 0, 0]; // vectors const i = [1, 0, 0]; const j = [0, 1, 0]; const k = [0, 0, 1]; const _i = [-1, 0, 0]; const _j = [0, -1, 0]; const _k = [0, 0, -1]; // shaders // precision const lowp = 0; const mediump = 1; const highp = 2; // in const pmvMatrix = 1 \u0026lt;\u0026lt; 0; const pMatrix = 1 \u0026lt;\u0026lt; 1; const mvMatrix = 1 \u0026lt;\u0026lt; 2; const nMatrix = 1 \u0026lt;\u0026lt; 3; // out const color4 = 1 \u0026lt;\u0026lt; 0; const texcoords2 = 1 \u0026lt;\u0026lt; 1; const normal3 = 1 \u0026lt;\u0026lt; 2; const position2 = 1 \u0026lt;\u0026lt; 3; const position3 = 1 \u0026lt;\u0026lt; 4; ext ??= {}; ext.INFO = INFO; ext.NONE = NONE; ext.X = X; ext.Y = Y; ext.Z = Z; ext._X = _X; ext._Y = _Y; ext._Z = _Z; ext.LABELS = LABELS; ext.SOLID = SOLID; ext.DOTS = DOTS; ext.SQUARE = SQUARE; ext.CIRCLE = CIRCLE; ext.PROJECTION = PROJECTION; ext.NEAR = NEAR; ext.FAR = FAR; ext.LEFT = LEFT; ext.RIGHT = RIGHT; ext.BOTTOM = BOTTOM; ext.TOP = TOP; ext.BODY = BODY; ext.INVISIBLE = INVISIBLE; ext.VISIBLE = VISIBLE; ext.SEMIVISIBLE = SEMIVISIBLE; ext.WORLD = WORLD; ext.EYE = EYE; ext.NDC = NDC; ext.SCREEN = SCREEN; ext.MODEL = MODEL; ext.ORIGIN = ORIGIN; ext.i = i; ext.j = j; ext.k = k; ext._i = _i; ext._j = _j; ext._k = _k; ext.lowp = lowp; ext.mediump = mediump; ext.highp = highp; ext.pmvMatrix = pmvMatrix; ext.pMatrix = pMatrix; ext.mvMatrix = mvMatrix; ext.nMatrix = nMatrix; ext.color4 = color4; ext.texcoords2 = texcoords2; ext.normal3 = normal3; ext.position2 = position2; ext.position3 = position3; return ext; })(Tree); (function () { console.log(Tree.INFO); // 1. Matrix stuff p5.Matrix.prototype.mult3 = function (vector) { if (this.mat3 === undefined) { console.error(\u0026#39;mult3 only works with mat3\u0026#39;); return; } return new p5.Vector(this.mat3[0] * vector.x + this.mat3[3] * vector.y + this.mat3[6] * vector.z, this.mat3[1] * vector.x + this.mat3[4] * vector.y + this.mat3[7] * vector.z, this.mat3[2] * vector.x + this.mat3[5] * vector.y + this.mat3[8] * vector.z); }; p5.Matrix.prototype.mult4 = function (vector) { return new p5.Vector(...this._mult4([vector.x, vector.y, vector.z, 1])); }; p5.Matrix.prototype._mult4 = function (vec4) { if (this.mat4 === undefined) { console.error(\u0026#39;_mult4 only works with mat4\u0026#39;); return; } return [this.mat4[0] * vec4[0] + this.mat4[4] * vec4[1] + this.mat4[8] * vec4[2] + this.mat4[12] * vec4[3], this.mat4[1] * vec4[0] + this.mat4[5] * vec4[1] + this.mat4[9] * vec4[2] + this.mat4[13] * vec4[3], this.mat4[2] * vec4[0] + this.mat4[6] * vec4[1] + this.mat4[10] * vec4[2] + this.mat4[14] * vec4[3], this.mat4[3] * vec4[0] + this.mat4[7] * vec4[1] + this.mat4[11] * vec4[2] + this.mat4[15] * vec4[3]]; }; p5.prototype.tMatrix = function (matrix) { return matrix.copy().transpose(matrix); } p5.prototype.invMatrix = function (matrix) { return matrix.copy().invert(matrix); } p5.prototype.axbMatrix = function (a, b) { return a.copy().apply(b); } p5.prototype.iMatrix = function () { return new p5.Matrix(); } p5.prototype.lMatrix = function () { return this._renderer.lMatrix(...arguments); } // defaults: from: iMatrix, to: eMatrix p5.RendererGL.prototype.lMatrix = function ( { from = new p5.Matrix(), to = this.eMatrix() } = {}) { return to.copy().invert(to).apply(from); } p5.prototype.dMatrix = function () { return this._renderer.dMatrix(...arguments); } // defaults: from: iMatrix, to: eMatrix p5.RendererGL.prototype.dMatrix = function ( { from = new p5.Matrix(), to = this.eMatrix(), matrix = from.copy().invert(from).apply(to) } = {}) { // Note that this transposes mat4 into mat3 return new p5.Matrix(\u0026#39;mat3\u0026#39;, [matrix.mat4[0], matrix.mat4[4], matrix.mat4[8], matrix.mat4[1], matrix.mat4[5], matrix.mat4[9], matrix.mat4[2], matrix.mat4[6], matrix.mat4[10]]); } p5.prototype.pMatrix = function () { return this._renderer.pMatrix(...arguments); } p5.RendererGL.prototype.pMatrix = function () { return this.uPMatrix.copy(); } p5.prototype.mvMatrix = function () { return this._renderer.mvMatrix(...arguments); } // defaults when mMatrix is defined: vMatrix: this.vMatrix, mMatrix: // otherwise it returns a copy of the current mvMatrix p5.RendererGL.prototype.mvMatrix = function ( { vMatrix, mMatrix } = {}) { return mMatrix ? (vMatrix ?? this.vMatrix()).copy().apply(mMatrix) : this.uMVMatrix.copy(); } p5.prototype.mMatrix = function () { return this._renderer.mMatrix(...arguments); } // defaults: eMatrix: this.eMatrix, mvMatrix: this.mvMatrix p5.RendererGL.prototype.mMatrix = function ( { eMatrix = this.eMatrix(), mvMatrix = this.mvMatrix() } = {}) { return eMatrix.copy().apply(mvMatrix); } p5.prototype.nMatrix = function () { return this._renderer.nMatrix(...arguments); } p5.RendererGL.prototype.nMatrix = function ({ vMatrix, mMatrix, mvMatrix = this.mvMatrix({ mMatrix: mMatrix, vMatrix: vMatrix }) } = {}) { return new p5.Matrix(\u0026#39;mat3\u0026#39;).inverseTranspose(mvMatrix); } // TODO check where to replace vMatrix for: // this._curCamera.cameraMatrix p5.prototype.vMatrix = function () { return this._renderer.vMatrix(...arguments); } p5.RendererGL.prototype.vMatrix = function () { return this._curCamera.vMatrix(); } p5.Camera.prototype.vMatrix = function () { return this.cameraMatrix.copy(); } p5.prototype.eMatrix = function () { return this._renderer.eMatrix(...arguments); } p5.RendererGL.prototype.eMatrix = function () { return this._curCamera.eMatrix(); } p5.Camera.prototype.eMatrix = function () { return this.cameraMatrix.copy().invert(this.cameraMatrix); } p5.prototype.pmvMatrix = function () { return this._renderer.pmvMatrix(...arguments); } p5.RendererGL.prototype.pmvMatrix = function ( { pMatrix = this.uPMatrix, vMatrix, mMatrix, mvMatrix = this.mvMatrix({ mMatrix: mMatrix, vMatrix: vMatrix }) } = {}) { return pMatrix.copy().apply(mvMatrix); } p5.prototype.pvMatrix = function () { return this._renderer.pvMatrix(...arguments); } // defaults: pMatrix: this.pMatrix, vMatrix: this.vMatrix p5.RendererGL.prototype.pvMatrix = function ( { pMatrix = this.uPMatrix, vMatrix = this._curCamera.cameraMatrix } = {}) { return pMatrix.copy().apply(vMatrix); } p5.prototype.pvInvMatrix = function () { return this._renderer.pvInvMatrix(...arguments); } p5.RendererGL.prototype.pvInvMatrix = function ( { pMatrix, vMatrix, pvMatrix } = {}) { let matrix = pvMatrix ? pvMatrix.copy() : this.pvMatrix({ pMatrix: pMatrix, vMatrix: vMatrix }); return matrix.invert(matrix); } p5.prototype._isOrtho = function () { return this._renderer._isOrtho(...arguments); } p5.RendererGL.prototype._isOrtho = function () { return this.uPMatrix._isOrtho(); } p5.Matrix.prototype._isOrtho = function () { return this.mat4[15] != 0; } p5.prototype.nPlane = function () { return this._renderer.nPlane(...arguments); } p5.RendererGL.prototype.nPlane = function () { return this.uPMatrix.nPlane(); } p5.Matrix.prototype.nPlane = function () { return this.mat4[15] == 0 ? this.mat4[14] / (this.mat4[10] - 1) : (1 + this.mat4[14]) / this.mat4[10]; } p5.prototype.fPlane = function () { return this._renderer.fPlane(...arguments); } p5.RendererGL.prototype.fPlane = function () { return this.uPMatrix.fPlane(); } p5.Matrix.prototype.fPlane = function () { return this.mat4[15] == 0 ? this.mat4[14] / (1 + this.mat4[10]) : (this.mat4[14] - 1) / this.mat4[10]; } p5.prototype.lPlane = function () { return this._renderer.lPlane(...arguments); } p5.RendererGL.prototype.lPlane = function () { return this.uPMatrix.lPlane(); } p5.Matrix.prototype.lPlane = function () { return this.mat4[15] == 1 ? -(1 + this.mat4[12]) / this.mat4[0] : this.nPlane() * (this.mat4[8] - 1) / this.mat4[0]; } p5.prototype.rPlane = function () { return this._renderer.rPlane(...arguments); } p5.RendererGL.prototype.rPlane = function () { return this.uPMatrix.rPlane(); } p5.Matrix.prototype.rPlane = function () { return this.mat4[15] == 1 ? (1 - this.mat4[12]) / this.mat4[0] : this.nPlane() * (1 + this.mat4[8]) / this.mat4[0]; } p5.prototype.tPlane = function () { return this._renderer.tPlane(...arguments); } p5.RendererGL.prototype.tPlane = function () { return this.uPMatrix.tPlane(); } p5.Matrix.prototype.tPlane = function () { // note that inverted values are returned if the projection // matrix was set with @function frustum. return this.mat4[15] == 1 ? (this.mat4[13] - 1) / this.mat4[5] : this.nPlane() * (this.mat4[9] - 1) / this.mat4[5]; } p5.prototype.bPlane = function () { return this._renderer.bPlane(...arguments); } p5.RendererGL.prototype.bPlane = function () { return this.uPMatrix.bPlane(); } p5.Matrix.prototype.bPlane = function () { // note that inverted values are returned if the projection // matrix was set with @function frustum. return this.mat4[15] == 1 ? (1 + this.mat4[13]) / this.mat4[5] : this.nPlane() * (1 + this.mat4[9]) / this.mat4[5]; } p5.prototype.fov = function () { return this._renderer.fov(...arguments); } p5.RendererGL.prototype.fov = function () { return this.uPMatrix.fov(); } p5.Matrix.prototype.fov = function () { if (this.mat4[15] != 0) { console.error(\u0026#39;fov only works for a perspective projection\u0026#39;); return; } return Math.abs(2 * Math.atan(1 / this.mat4[5])); } p5.prototype.hfov = function () { return this._renderer.hfov(...arguments); } p5.RendererGL.prototype.hfov = function () { return this.uPMatrix.hfov(); } p5.Matrix.prototype.hfov = function () { if (this.mat4[15] != 0) { console.error(\u0026#39;hfov only works for a perspective projection\u0026#39;); return; } return Math.abs(2 * Math.atan(1 / this.mat4[0])); } // 2. Space transformations p5.prototype.beginHUD = function () { if (this._renderer instanceof p5.RendererGL) { this._renderer.beginHUD(...arguments); } } p5.RendererGL.prototype.beginHUD = function () { this.mv = this.mvMatrix(); this.p = this.pMatrix(); this._rendererState = this.push(); let gl = this.drawingContext; gl.flush(); gl.disable(gl.DEPTH_TEST); this.resetMatrix(); let z = Number.MAX_VALUE; this._curCamera.ortho(0, this.width, -this.height, 0, -z, z); } p5.prototype.endHUD = function () { if (this._renderer instanceof p5.RendererGL) { this._renderer.endHUD(...arguments); } } p5.RendererGL.prototype.endHUD = function () { let gl = this.drawingContext; gl.flush(); gl.enable(gl.DEPTH_TEST); this.pop(this._rendererState); this.uPMatrix.set(this.p); this.uMVMatrix.set(this.mv); } // 2.1 Points // NDC stuff needs testing p5.prototype._map = function () { return this._renderer._map(...arguments); } p5.RendererGL.prototype._map = function (n, start1, stop1, start2, stop2) { return (n - start1) / (stop1 - start1) * (stop2 - start2) + start2; } p5.prototype.treeLocation = function () { return this._renderer.treeLocation(...arguments); } /** * Converts locations (i.e., points) from one space into another. * @param {p5.Vector} vector location to be converted. * @param {p5.Matrix|String} from source space: either a global * transform matrix or Tree.WORLD, Tree.EYE, * Tree.SCREEN, Tree.NDC or Tree.MODEL. * @param {p5.Matrix|String} to target space: either a global * transform matrix or Tree.WORLD, Tree.EYE, * Tree.SCREEN, Tree.NDC or Tree.MODEL. * @param {p5.Matrix} pMatrix projection matrix. * @param {p5.Matrix} vMatrix view matrix. * @param {p5.Matrix} pvMatrix projection times view matrix. * @param {p5.Matrix} pvInvMatrix (projection times view matrix)^-1. */ p5.RendererGL.prototype.treeLocation = function () { return arguments.length === 1 \u0026amp; arguments[0] instanceof Object ? this._treeLocation(Tree.ORIGIN, arguments[0]) : this._treeLocation(...arguments); } p5.prototype._treeLocation = function () { return this._renderer._treeLocation(...arguments); } p5.RendererGL.prototype._treeLocation = function (vector = Tree.ORIGIN, { from = Tree.EYE, to = Tree.WORLD, pMatrix, vMatrix, eMatrix, pvMatrix, pvInvMatrix } = {}) { if (Array.isArray(vector)) { vector = new p5.Vector(vector[0] ?? 0, vector[1] ?? 0, vector[2] ?? 0); } if (from == Tree.MODEL) { from = this.mMatrix({ eMatrix: eMatrix }); } if (to == Tree.MODEL) { to = this.mMatrix({ eMatrix: eMatrix }); } if ((from == Tree.WORLD) \u0026amp;\u0026amp; (to == Tree.SCREEN)) { return this._screenLocation({ vector: vector, pMatrix: pMatrix, vMatrix: vMatrix, pvMatrix: pvMatrix }); } if ((from == Tree.SCREEN) \u0026amp;\u0026amp; (to == Tree.WORLD)) { return this._location({ vector: vector, pMatrix: pMatrix, vMatrix: vMatrix, pvMatrix: pvMatrix, pvInvMatrix: pvInvMatrix }); } if (from == Tree.SCREEN \u0026amp;\u0026amp; to == Tree.NDC) { return this._screenToNDCLocation(vector); } if (from == Tree.NDC \u0026amp;\u0026amp; to == Tree.SCREEN) { return this._ndcToScreenLocation(vector); } if (from == Tree.WORLD \u0026amp;\u0026amp; to == Tree.NDC) { return this._screenToNDCLocation(this._screenLocation({ vector: vector, pMatrix: pMatrix, vMatrix: vMatrix, pvMatrix: pvMatrix })); } if (from == Tree.NDC \u0026amp;\u0026amp; to == Tree.WORLD) { return this._location({ vector: this._ndcToScreenLocation(vector), pMatrix: pMatrix, vMatrix: vMatrix, pvMatrix: pvMatrix, pvInvMatrix: pvInvMatrix }); } if (from == Tree.NDC \u0026amp;\u0026amp; (to instanceof p5.Matrix || to == Tree.EYE)) { return (to == Tree.EYE ? (vMatrix ?? this.vMatrix()) : to.copy().invert(to)).mult4(this._location({ vector: this._ndcToScreenLocation(vector), pMatrix: pMatrix, vMatrix: vMatrix, pvMatrix: pvMatrix, pvInvMatrix: pvInvMatrix })); } if ((from instanceof p5.Matrix || from == Tree.EYE) \u0026amp;\u0026amp; to == Tree.NDC) { return this._screenToNDCLocation(this._screenLocation({ vector: (from == Tree.EYE ? (eMatrix ?? this.eMatrix()) : from).mult4(vector), pMatrix: pMatrix, vMatrix: vMatrix, pvMatrix: pvMatrix })); } if (from == Tree.WORLD \u0026amp;\u0026amp; (to instanceof p5.Matrix || to == Tree.EYE)) { return (to == Tree.EYE ? (vMatrix ?? this.vMatrix()) : to.copy().invert(to)).mult4(vector); } if ((from instanceof p5.Matrix || from == Tree.EYE) \u0026amp;\u0026amp; to == Tree.WORLD) { return (from == Tree.EYE ? (eMatrix ?? this.eMatrix()) : from).mult4(vector); } if (from instanceof p5.Matrix \u0026amp;\u0026amp; to instanceof p5.Matrix) { return this.lMatrix({ from: from, to: to }).mult4(vector); } if (from == Tree.SCREEN \u0026amp;\u0026amp; (to instanceof p5.Matrix || to == Tree.EYE)) { return (to == Tree.EYE ? (vMatrix ?? this.vMatrix()) : to.copy().invert(to)).mult4(this._location({ vector: vector, pMatrix: pMatrix, vMatrix: vMatrix, pvMatrix: pvMatrix, pvInvMatrix: pvInvMatrix })); } if ((from instanceof p5.Matrix || from == Tree.EYE) \u0026amp;\u0026amp; to == Tree.SCREEN) { return this._screenLocation({ vector: (from == Tree.EYE ? (eMatrix ?? this.eMatrix()) : from).mult4(vector), pMatrix: pMatrix, vMatrix: vMatrix, pvMatrix: pvMatrix }); } console.error(\u0026#39;couldn\\\u0026#39;t parse your treeLocation query!\u0026#39;); return vector; } p5.RendererGL.prototype._ndcToScreenLocation = function (vector) { return new p5.Vector(this._map(vector.x, -1, 1, 0, this.width), this._map(vector.y, -1, 1, 0, this.height), this._map(vector.z, -1, 1, 0, 1)); } p5.RendererGL.prototype._screenToNDCLocation = function (vector) { return new p5.Vector(this._map(vector.x, 0, this.width, -1, 1), this._map(vector.y, 0, this.height, -1, 1), this._map(vector.z, 0, 1, -1, 1)); } p5.RendererGL.prototype._screenLocation = function ( { vector = new p5.Vector(0, 0, 0.5), pMatrix, vMatrix, pvMatrix = this.pvMatrix({ pMatrix: pMatrix, vMatrix: vMatrix }) } = {}) { let target = pvMatrix._mult4([vector.x, vector.y, vector.z, 1]); if (target[3] == 0) { console.error(\u0026#39;screenLocation broken. Check your pvMatrix!\u0026#39;); return; } let viewport = [0, this.height, this.width, -this.height]; // ndc, but y is inverted target[0] /= target[3]; target[1] /= target[3]; target[2] /= target[3]; // Map x, y and z to range 0-1 target[0] = target[0] * 0.5 + 0.5; target[1] = target[1] * 0.5 + 0.5; target[2] = target[2] * 0.5 + 0.5; // Map x,y to viewport target[0] = target[0] * viewport[2] + viewport[0]; target[1] = target[1] * viewport[3] + viewport[1]; return new p5.Vector(target[0], target[1], target[2]); } p5.RendererGL.prototype._location = function ( { vector = new p5.Vector(this.width / 2, this.height / 2, 0.5), pMatrix, vMatrix, pvMatrix, pvInvMatrix = this.pvInvMatrix({ pMatrix: pMatrix, vMatrix: vMatrix, pvMatrix: pvMatrix }) } = {}) { let viewport = [0, this.height, this.width, -this.height]; let source = [vector.x, vector.y, vector.z, 1]; // Map x and y from window coordinates source[0] = (source[0] - viewport[0]) / viewport[2]; source[1] = (source[1] - viewport[1]) / viewport[3]; // Map to range -1 to 1 source[0] = source[0] * 2 - 1; source[1] = source[1] * 2 - 1; source[2] = source[2] * 2 - 1; let target = pvInvMatrix._mult4(source); if (target[3] == 0) { console.error(\u0026#39;location broken. Check your pvInvMatrix!\u0026#39;); return; } target[0] /= target[3]; target[1] /= target[3]; target[2] /= target[3]; return new p5.Vector(target[0], target[1], target[2]); } // 2.2. Vectors // NDC stuff needs testing p5.prototype.treeDisplacement = function () { return this._renderer.treeDisplacement(...arguments); } /** * Converts displacements (i.e., vectors) from one space into another. * @param {p5.Vector} vector location to be converted. * @param {p5.Matrix|String} from source space: either a global * transform matrix or Tree.WORLD, Tree.EYE, * Tree.SCREEN, Tree.NDC or Tree.MODEL. * @param {p5.Matrix|String} to target space: either a global * transform matrix or Tree.WORLD, Tree.EYE, * Tree.SCREEN, Tree.NDC or Tree.MODEL. * @param {p5.Matrix} pMatrix projection matrix. * @param {p5.Matrix} vMatrix view matrix. * @param {p5.Matrix} pvMatrix projection times view matrix. * @param {p5.Matrix} pvInvMatrix (projection times view matrix)^-1. */ p5.RendererGL.prototype.treeDisplacement = function () { return arguments.length === 1 \u0026amp; arguments[0] instanceof Object ? this._treeDisplacement(Tree._k, arguments[0]) : this._treeDisplacement(...arguments); } p5.prototype._treeDisplacement = function () { return this._renderer._treeDisplacement(...arguments); } p5.RendererGL.prototype._treeDisplacement = function (vector = Tree._k, { from = Tree.EYE, to = Tree.WORLD, vMatrix, eMatrix, pMatrix } = {}) { if (Array.isArray(vector)) { vector = new p5.Vector(vector[0] ?? 0, vector[1] ?? 0, vector[2] ?? 0); } if (from == Tree.MODEL) { from = this.mMatrix({ eMatrix: eMatrix }); } if (to == Tree.MODEL) { to = this.mMatrix({ eMatrix: eMatrix }); } if ((from == Tree.WORLD) \u0026amp;\u0026amp; (to == Tree.SCREEN)) { return this._worldToScreenDisplacement(vector, pMatrix); } if ((from == Tree.SCREEN) \u0026amp;\u0026amp; (to == Tree.WORLD)) { return this._screenToWorldDisplacement(vector, pMatrix); } if (from == Tree.SCREEN \u0026amp;\u0026amp; to == Tree.NDC) { return this._screenToNDCDisplacement(vector); } if (from == Tree.NDC \u0026amp;\u0026amp; to == Tree.SCREEN) { return this._ndcToScreenDisplacement(vector); } if (from == Tree.WORLD \u0026amp;\u0026amp; to == Tree.NDC) { return this._screenToNDCDisplacement(this._worldToScreenDisplacement(vector, pMatrix)); } if (from == Tree.NDC \u0026amp;\u0026amp; to == Tree.WORLD) { return this._screenToWorldDisplacement(this._ndcToScreenDisplacement(vector), pMatrix); } if (from == Tree.NDC \u0026amp;\u0026amp; to == Tree.EYE) { return this.dMatrix({ matrix: eMatrix ?? this.eMatrix() }).mult3(this._screenToWorldDisplacement(this._ndcToScreenDisplacement(vector), pMatrix)); } if (from == Tree.EYE \u0026amp;\u0026amp; to == Tree.NDC) { return this._screenToNDCDisplacement(this._worldToScreenDisplacement(this.dMatrix({ matrix: vMatrix ?? this.vMatrix() }).mult3(vector), pMatrix)); } if (from == Tree.SCREEN \u0026amp;\u0026amp; to instanceof p5.Matrix) { return this.dMatrix({ matrix: to }).mult3(this._screenToWorldDisplacement(vector, pMatrix)); } if (from instanceof p5.Matrix \u0026amp;\u0026amp; to == Tree.SCREEN) { return this._worldToScreenDisplacement(this.dMatrix({ matrix: from.copy().invert(from) }).mult3(vector), pMatrix); } if (from instanceof p5.Matrix \u0026amp;\u0026amp; to instanceof p5.Matrix) { return this.dMatrix({ from: from, to: to }).mult3(vector); } // all cases below kept for efficiency but they all may // be simply expressed in terms of the previous case, by: // Tree.EYE -\u0026gt; eMatrix() // Tree.WORLD -\u0026gt; iMatrix() if (from == Tree.EYE \u0026amp;\u0026amp; to == Tree.WORLD) { return this.dMatrix({ matrix: vMatrix ?? this.vMatrix() }).mult3(vector); } if (from == Tree.WORLD \u0026amp;\u0026amp; to == Tree.EYE) { return this.dMatrix({ matrix: eMatrix ?? this.eMatrix() }).mult3(vector); } if (from == Tree.EYE \u0026amp;\u0026amp; to == Tree.SCREEN) { return this._worldToScreenDisplacement(this.dMatrix({ matrix: vMatrix ?? this.vMatrix() }).mult3(vector), pMatrix); } if (from == Tree.SCREEN \u0026amp;\u0026amp; to == Tree.EYE) { return this.dMatrix({ matrix: eMatrix ?? this.eMatrix() }).mult3(this._screenToWorldDisplacement(vector, pMatrix)); } if (from == Tree.EYE \u0026amp;\u0026amp; to instanceof p5.Matrix) { return this.dMatrix({ matrix: (vMatrix ?? this.vMatrix()).apply(to) }).mult3(vector); } if (from instanceof p5.Matrix \u0026amp;\u0026amp; to == Tree.EYE) { return this.dMatrix({ matrix: from.copy().invert(from).apply(eMatrix ?? this.eMatrix()) }).mult3(vector); } if (from == Tree.WORLD \u0026amp;\u0026amp; to instanceof p5.Matrix) { return this.dMatrix({ matrix: to }).mult3(vector); } if (from instanceof p5.Matrix \u0026amp;\u0026amp; to == Tree.WORLD) { return this.dMatrix({ matrix: from.copy().invert(from) }).mult3(vector); } console.error(\u0026#39;couldn\\\u0026#39;t parse your treeDisplacement query!\u0026#39;); return vector; } p5.RendererGL.prototype._worldToScreenDisplacement = function (vector, pMatrix = this.uPMatrix) { let eyeVector = this._treeDisplacement(vector, { from: Tree.WORLD, to: Tree.EYE }); let dx = eyeVector.x; let dy = eyeVector.y; let perspective = pMatrix.mat4[15] == 0; if (perspective) { let position = new p5.Vector(); let k = Math.abs(this._treeLocation(position, { from: Tree.WORLD, to: Tree.EYE }).z * Math.tan(this.fov(pMatrix) / 2)); dx /= 2 * k / this.height; dy /= 2 * k / this.height; } let dz = eyeVector.z; // sign is inverted dz /= (pMatrix.nPlane() - pMatrix.fPlane()) / (perspective ? Math.tan(this.fov(pMatrix) / 2) : Math.abs(pMatrix.rPlane() - pMatrix.lPlane()) / this.width); return new p5.Vector(dx, dy, dz); } p5.RendererGL.prototype._screenToWorldDisplacement = function (vector, pMatrix = this.uPMatrix) { let dx = vector.x; let dy = vector.y; // Scale to fit the screen relative vector displacement let perspective = pMatrix.mat4[15] == 0; if (perspective) { let position = new p5.Vector(); let k = Math.abs(this._treeLocation(position, { from: Tree.WORLD, to: Tree.EYE }).z * Math.tan(this.fov(pMatrix) / 2)); dx *= 2 * k / this.height; dy *= 2 * k / this.height; } let dz = vector.z; dz *= (pMatrix.nPlane() - pMatrix.fPlane()) / (perspective ? Math.tan(this.fov(pMatrix) / 2) : Math.abs(pMatrix.rPlane() - pMatrix.lPlane()) / this.width); let eyeVector = new p5.Vector(dx, dy, dz); return this._treeDisplacement(eyeVector, { from: Tree.EYE, to: Tree.WORLD }); } p5.RendererGL.prototype._ndcToScreenDisplacement = function (vector) { return new p5.Vector(this.width * vector.x / 2, this.height * vector.y / 2, vector.z / 2); } p5.RendererGL.prototype._screenToNDCDisplacement = function (vector) { return new p5.Vector(2 * vector.x / this.width, 2 * vector.y / this.height, 2 * vector.z); } // 3. Shader utilities p5.prototype.readShader = function (fragFilename, { precision, matrices, varyings } = {}) { let shader = new p5.Shader(); this._coupledWith = fragFilename.substring(fragFilename.lastIndexOf(\u0026#39;/\u0026#39;) + 1); shader._vertSrc = this.parseVertexShader({ precision: precision, matrices: matrices, varyings: varyings, _specs: false }); this._coupledWith = undefined; this.loadStrings( fragFilename, result =\u0026gt; { shader._fragSrc = result.join(\u0026#39;\\n\u0026#39;) } ); return shader; } p5.prototype.makeShader = function (fragSrc, { precision, matrices, varyings } = {}) { let shader = new p5.Shader(); this._coupledWith = \u0026#39;the fragment shader provided as param in makeShader()\u0026#39;; shader._vertSrc = this.parseVertexShader({ precision: precision, matrices: matrices, varyings: varyings, _specs: false }); this._coupledWith = undefined; shader._fragSrc = fragSrc; return shader; } p5.prototype.parseVertexShader = function ({ precision = Tree.mediump, matrices = Tree.pmvMatrix, varyings = Tree.color4 | Tree.texcoords2, _specs = true } = {}) { let floatPrecision = `precision ${precision === Tree.highp ? \u0026#39;highp\u0026#39; : `${precision === Tree.mediump ? \u0026#39;mediump\u0026#39; : \u0026#39;lowp\u0026#39;}`} float;` let color4 = ~(varyings | ~Tree.color4) === 0; let texcoords2 = ~(varyings | ~Tree.texcoords2) === 0; let normal3 = ~(varyings | ~Tree.normal3) === 0; let position2 = ~(varyings | ~Tree.position2) === 0; let position3 = ~(varyings | ~Tree.position3) === 0; let pmv = ~(matrices | ~Tree.pmvMatrix) === 0; let p = ~(matrices | ~Tree.pMatrix) === 0; let mv = ~(matrices | ~Tree.mvMatrix) === 0; let n = (~(matrices | ~Tree.nMatrix) === 0) || normal3; const target = `gl_Position =${pmv ? \u0026#39; uModelViewProjectionMatrix * \u0026#39; : `${p \u0026amp;\u0026amp; mv ? \u0026#39; uProjectionMatrix * uModelViewMatrix *\u0026#39; : \u0026#39;\u0026#39;} `}vec4(aPosition, 1.0)`; let vertexShader = ` ${floatPrecision} attribute vec3 aPosition; ${color4 ? \u0026#39;attribute vec4 aVertexColor;\u0026#39; : \u0026#39;\u0026#39;} ${texcoords2 ? \u0026#39;attribute vec2 aTexCoord;\u0026#39; : \u0026#39;\u0026#39;} ${normal3 ? \u0026#39;attribute vec3 aNormal;\u0026#39; : \u0026#39;\u0026#39;} ${pmv ? \u0026#39;uniform mat4 uModelViewProjectionMatrix;\u0026#39; : \u0026#39;\u0026#39;} ${p ? \u0026#39;uniform mat4 uProjectionMatrix;\u0026#39; : \u0026#39;\u0026#39;} ${mv ? \u0026#39;uniform mat4 uModelViewMatrix;\u0026#39; : \u0026#39;\u0026#39;} ${n ? \u0026#39;uniform mat3 uNormalMatrix;\u0026#39; : \u0026#39;\u0026#39;} ${color4 ? \u0026#39;varying vec4 color4;\u0026#39; : \u0026#39;\u0026#39;} ${texcoords2 ? \u0026#39;varying vec2 texcoords2;\u0026#39; : \u0026#39;\u0026#39;} ${normal3 ? \u0026#39;varying vec3 normal3;\u0026#39; : \u0026#39;\u0026#39;} ${position2 ? \u0026#39;varying vec2 position2;\u0026#39; : \u0026#39;\u0026#39;} ${position3 ? \u0026#39;varying vec3 position3;\u0026#39; : \u0026#39;\u0026#39;} void main() { ${color4 ? \u0026#39;color4 = aVertexColor;\u0026#39; : \u0026#39;\u0026#39;} ${texcoords2 ? \u0026#39;texcoords2 = aTexCoord;\u0026#39; : \u0026#39;\u0026#39;} ${normal3 ? \u0026#39;normal3 = normalize(uNormalMatrix * aNormal);\u0026#39; : \u0026#39;\u0026#39;} ${position2 ? \u0026#39;position2 = vec4(aPosition, 1.0).xy;\u0026#39; : \u0026#39;\u0026#39;} ${position3 ? \u0026#39;position3 = vec4(aPosition, 1.0).xyz;\u0026#39; : \u0026#39;\u0026#39;} ${target}; } `; let advice = ` /* ${this._coupledWith ? \u0026#39;Vertex shader code to be coupled with \u0026#39; + this._coupledWith : \u0026#39;\u0026#39;} Generated with treegl version ${Tree.INFO.VERSION} ${_specs ? ` Feel free to copy, paste, edit and save it. Refer to createShader (https://p5js.org/reference/#/p5/createShader), loadShader (https://p5js.org/reference/#/p5/loadShader), readShader and makeShader (https://github.com/VisualComputing/p5.treegl#handling), for details.` : \u0026#39;\u0026#39;} */ `; let result = advice + vertexShader; result = result.split(/\\r?\\n/) .filter(line =\u0026gt; line.trim() !== \u0026#39;\u0026#39;) .join(\u0026#34;\\n\u0026#34;); console.log(result); return result; } p5.prototype.emitMousePosition = function (shader, uniform = \u0026#39;u_mouse\u0026#39;) { shader.setUniform(uniform, [this.mouseX * pixelDensity(), (this.height - this.mouseY) * pixelDensity()]); } p5.prototype.emitPointerPosition = function () { this._renderer.emitPointerPosition(...arguments); } p5.RendererGL.prototype.emitPointerPosition = function (shader, pointerX, pointerY, uniform = \u0026#39;u_pointer\u0026#39;) { shader.setUniform(uniform, [pointerX * pixelDensity(), (this.height - pointerY) * pixelDensity()]); } p5.prototype.emitResolution = function () { this._renderer.emitResolution(...arguments); } p5.RendererGL.prototype.emitResolution = function (shader, uniform = \u0026#39;u_resolution\u0026#39;) { shader.setUniform(uniform, [this.width * pixelDensity(), this.height * pixelDensity()]); } p5.prototype.emitTexOffset = function (shader, image, uniform = \u0026#39;u_texoffset\u0026#39;) { shader.setUniform(uniform, [1 / image.width, 1 / image.height]); } // 4. Utility functions p5.prototype.pixelRatio = function () { return this._renderer.pixelRatio(...arguments); } /** * Returns the world to pixel ratio units at given world location. * A line of n * pixelRatio(location) world units will be projected * with a length of n pixels on screen. * @param {p5.Vector | Array} location world location reference */ p5.RendererGL.prototype.pixelRatio = function (location) { return this._isOrtho() ? Math.abs(this.tPlane() - this.bPlane()) / this.height : 2 * Math.abs((this._treeLocation(location, { from: Tree.WORLD, to: Tree.EYE, vMatrix: this._curCamera.cameraMatrix })).z) * Math.tan(this.fov() / 2) / this.height; } p5.prototype.visibility = function () { return this._renderer.visibility(...arguments); } /** * Returns object visibility (i.e, lies within the eye bounds) * either Tree.VISIBLE, Tree.INVISIBLE, or Tree.SEMIVISIBLE. * Object may be either a point, a sphere or an axis-aligned box. * @param {p5.Vector | Array} corner1 box corner1, use it with corner2. * @param {p5.Vector | Array} corner2 box corner2, use it with corner1. * @param {p5.Vector | Array} center sphere (or point) center. * @param {Number} radius sphere radius. * @param {Array} bounds frustum equations 6x4 matrix. */ p5.RendererGL.prototype.visibility = function ({ corner1, corner2, center, radius, bounds = this.bounds() } = {}) { return center ? radius ? this._ballVisibility(center, radius, bounds) : this._pointVisibility(center, bounds) : corner1 \u0026amp;\u0026amp; corner2 ? this._boxVisibility(corner1, corner2, bounds) : console.error(\u0026#39;couldn\\\u0026#39;t parse your visibility query!\u0026#39;); } p5.RendererGL.prototype._pointVisibility = function (point, bounds = this.bounds()) { for (const key in bounds) { let d = this.distanceToBound(point, key, bounds); if (d \u0026gt; 0) { return Tree.INVISIBLE; } if (d === 0) { return Tree.SEMIVISIBLE; } } return Tree.VISIBLE; } p5.RendererGL.prototype._ballVisibility = function (center, radius, bounds = this.bounds()) { let allInForAllPlanes = true; for (const key in bounds) { let d = this.distanceToBound(center, key, bounds); if (d \u0026gt; radius) { return Tree.INVISIBLE; } if ((d \u0026gt; 0) || (-d \u0026lt; radius)) { allInForAllPlanes = false; } } if (allInForAllPlanes) { return Tree.VISIBLE; } return Tree.SEMIVISIBLE; } p5.RendererGL.prototype._boxVisibility = function (corner1, corner2, bounds = this.bounds()) { if (Array.isArray(corner1)) { corner1 = new p5.Vector(corner1[0] ?? 0, corner1[1] ?? 0, corner1[2] ?? 0); } if (Array.isArray(corner2)) { corner2 = new p5.Vector(corner2[0] ?? 0, corner2[1] ?? 0, corner2[2] ?? 0); } let allInForAllPlanes = true; for (const key in bounds) { let allOut = true; for (let c = 0; c \u0026lt; 8; ++c) { let pos = new p5.Vector(((c \u0026amp; 4) != 0) ? corner1.x : corner2.x, ((c \u0026amp; 2) != 0) ? corner1.y : corner2.y, ((c \u0026amp; 1) != 0) ? corner1.z : corner2.z); if (this.distanceToBound(pos, key, bounds) \u0026gt; 0) { allInForAllPlanes = false; } else { allOut = false; } } // The eight points are on the outside side of this plane if (allOut) { return Tree.INVISIBLE; } } if (allInForAllPlanes) { return Tree.VISIBLE; } // Too conservative, but tangent cases are too expensive to detect return Tree.SEMIVISIBLE; } p5.prototype.bounds = function () { return this._renderer.bounds(...arguments); } /** * Returns the 6 plane equations of the eye frustum bounds defined * in the world coordinate system encoded as an object literal * having \u0026#39;Tree.LEFT\u0026#39; (left plane), \u0026#39;Tree.RIGHT\u0026#39; (right plane), * \u0026#39;Tree.NEAR\u0026#39; (near plane), \u0026#39;Tree.FAR\u0026#39; (far plane) \u0026#39;Tree.TOP\u0026#39; * (top plane) and \u0026#39;Tree.BOTTOM\u0026#39; (bottom plane) keys. * Each key holds a plane equation of the form: * a*x + b*y + c*z + d = 0, where a, b, c and d are the 4 * keys of each object literal. */ p5.RendererGL.prototype.bounds = function () { let normals = Array(6); let distances = Array(6); // Computed once and for all // TODO experimental: no need to normalize let pos = this._treeLocation([0, 0, 0], { from: Tree.EYE, to: Tree.WORLD }); let viewDir = this._treeDisplacement([0, 0, -1], { from: Tree.EYE, to: Tree.WORLD }); // same as: let viewDir = this.treeDisplacement(); let up = this._treeDisplacement([0, 1, 0], { from: Tree.EYE, to: Tree.WORLD }); let right = this._treeDisplacement([1, 0, 0], { from: Tree.EYE, to: Tree.WORLD }); let posViewDir = p5.Vector.dot(pos, viewDir); if (this._isOrtho()) { normals[0] = p5.Vector.mult(right, -1); normals[1] = right; normals[4] = up; normals[5] = p5.Vector.mult(up, -1); let wh0 = Math.abs(this.rPlane() - this.lPlane()) / 2; let wh1 = Math.abs(this.tPlane() - this.bPlane()) / 2; distances[0] = p5.Vector.dot(p5.Vector.sub(pos, p5.Vector.mult(right, wh0)), normals[0]); distances[1] = p5.Vector.dot(p5.Vector.add(pos, p5.Vector.mult(right, wh0)), normals[1]); distances[4] = p5.Vector.dot(p5.Vector.add(pos, p5.Vector.mult(up, wh1)), normals[4]); distances[5] = p5.Vector.dot(p5.Vector.sub(pos, p5.Vector.mult(up, wh1)), normals[5]); } else { let hhfov = this.hfov() / 2; let chhfov = Math.cos(hhfov); let shhfov = Math.sin(hhfov); normals[0] = p5.Vector.mult(viewDir, -shhfov); normals[1] = p5.Vector.add(normals[0], p5.Vector.mult(right, chhfov)); normals[0] = p5.Vector.add(normals[0], p5.Vector.mult(right, -chhfov)); normals[2] = p5.Vector.mult(viewDir, -1); normals[3] = viewDir; let hfov = this.fov() / 2; let chfov = Math.cos(hfov); let shfov = Math.sin(hfov); normals[4] = p5.Vector.mult(viewDir, -shfov); normals[5] = p5.Vector.add(normals[4], p5.Vector.mult(up, -chfov)); normals[4] = p5.Vector.add(normals[4], p5.Vector.mult(up, chfov)); for (let i = 0; i \u0026lt; 2; ++i) { distances[i] = p5.Vector.dot(pos, normals[i]); } for (let j = 4; j \u0026lt; 6; ++j) { distances[j] = p5.Vector.dot(pos, normals[j]); } // Natural equations are: // dist[0,1,4,5] = pos * normal[0,1,4,5]; // dist[2] = (pos + zNear() * viewDir) * normal[2]; // dist[3] = (pos + zFar() * viewDir) * normal[3]; // 2 times less computations using expanded/merged equations. Dir vectors // are normalized. let posRightCosHH = chhfov * p5.Vector.dot(pos, right); distances[0] = -shhfov * posViewDir; distances[1] = distances[0] + posRightCosHH; distances[0] = distances[0] - posRightCosHH; let posUpCosH = chfov * p5.Vector.dot(pos, up); distances[4] = -shfov * posViewDir; distances[5] = distances[4] - posUpCosH; distances[4] = distances[4] + posUpCosH; } // Front and far planes are identical for both camera types. normals[2] = p5.Vector.mult(viewDir, -1); normals[3] = viewDir; distances[2] = -posViewDir - this.nPlane(); distances[3] = posViewDir + this.fPlane(); let bounds = {}; bounds[Tree.LEFT] = { a: normals[0].x, b: normals[0].y, c: normals[0].z, d: distances[0] }; bounds[Tree.RIGHT] = { a: normals[1].x, b: normals[1].y, c: normals[1].z, d: distances[1] }; bounds[Tree.NEAR] = { a: normals[2].x, b: normals[2].y, c: normals[2].z, d: distances[2] }; bounds[Tree.FAR] = { a: normals[3].x, b: normals[3].y, c: normals[3].z, d: distances[3] }; bounds[Tree.TOP] = { a: normals[4].x, b: normals[4].y, c: normals[4].z, d: distances[4] }; bounds[Tree.BOTTOM] = { a: normals[5].x, b: normals[5].y, c: normals[5].z, d: distances[5] }; return bounds; } p5.prototype.distanceToBound = function () { return this._renderer.distanceToBound(...arguments); } /** * Returns the signed distance between location and the frustum plane defined * by bounds and key which may be either Tree.LEFT, Tree.RIGHT, Tree.BOTTOM, * Tree.TOP, Tree.NEAR or Tree.FAR. The distance is negative if the point lies * in the planes\u0026#39;s bounding halfspace, and positive otherwise. */ p5.RendererGL.prototype.distanceToBound = function (location, key, bounds = this.bounds()) { if (Array.isArray(location)) { location = new p5.Vector(location[0] ?? 0, location[1] ?? 0, location[2] ?? 0); } return p5.Vector.dot(location, new p5.Vector(bounds[key].a, bounds[key].b, bounds[key].c)) - bounds[key].d; } p5.prototype.mousePicking = function ({ mMatrix = this.mMatrix(), x, y, size = 50, shape = Tree.CIRCLE, eMatrix, pMatrix, vMatrix, pvMatrix } = {}) { return this.pointerPicking(this.mouseX, this.mouseY, { mMatrix: mMatrix, x: x, y: y, size: size, shape: shape, eMatrix: eMatrix, pMatrix: pMatrix, vMatrix: vMatrix, pvMatrix: pvMatrix }); } p5.prototype.pointerPicking = function () { return this._renderer.pointerPicking(...arguments); } /** * Returns true if pointer is close enough to pointerX, pointerY screen location. * @param {p5.Matrix} mMatrix model space matrix origin to compute (x, y) from. * @param {Number} x screen x coordinate. Default is width / 2. * @param {Number} y screen y coordinate. Default is height / 2. * @param {Number} size bullseye diameter. Default is 50. * @param {Number} shape either Tree.CIRCLE, Tree.SQUARE or Tree.PROJECTION. Default is Tree.CIRCLE. */ p5.RendererGL.prototype.pointerPicking = function (pointerX, pointerY, { mMatrix = this.mMatrix(), x, y, size = 50, shape = Tree.CIRCLE, eMatrix, pMatrix, vMatrix, pvMatrix } = {}) { if (!(x \u0026amp;\u0026amp; y)) { let screenLocation = this.treeLocation({ from: mMatrix, to: Tree.SCREEN, pMatrix: pMatrix, vMatrix: vMatrix, pvMatrix: pvMatrix }); x = screenLocation.x; y = screenLocation.y; size = size / this.pixelRatio(this.treeLocation({ from: mMatrix, to: Tree.WORLD, eMatrix: eMatrix })); } // TODO implement webgl picking here using a switch statement: Tree.CIRCLE, Tree.SQUARE, Tree.PROJECTION let radius = size / 2; return shape === Tree.CIRCLE ? Math.sqrt(Math.pow((x - pointerX), 2.0) + Math.pow((y - pointerY), 2.0)) \u0026lt; radius : ((Math.abs(pointerX - x) \u0026lt; radius) \u0026amp;\u0026amp; (Math.abs(pointerY - y) \u0026lt; radius)); } // 5. Drawing stuff p5.prototype.axes = function () { this._renderer.axes(...arguments); }; /** * Draws axes. * @param {Number} size size in world units. * @param {Number} bits bitwise mask that may be composed of Tree.X, Tree._X, * Tree.Y, Tree._Y, Tree.Z, Tree._Z and Tree.LABELS bits. */ p5.RendererGL.prototype.axes = function ({ size = 100, bits = Tree.LABELS | Tree.X | Tree.Y | Tree.Z } = {}) { this._rendererState = this.push(); if (~(bits | ~Tree.LABELS) === 0) { const charWidth = size / 40.0; const charHeight = size / 30.0; const charShift = 1.04 * size; // The X this.stroke(200, 0, 0); this.line(charShift, charWidth, -charHeight, charShift, -charWidth, charHeight); this.line(charShift, -charWidth, -charHeight, charShift, charWidth, charHeight); // The Y this.stroke(0, 200, 0); this.line(charWidth, charShift, charHeight, 0.0, charShift, 0.0); this.line(0.0, charShift, 0.0, -charWidth, charShift, charHeight); this.line(-charWidth, charShift, charHeight, 0.0, charShift, 0.0); this.line(0.0, charShift, 0.0, 0.0, charShift, -charHeight); // The Z this.stroke(0, 100, 200); this.line(-charWidth, -charHeight, charShift, charWidth, -charHeight, charShift); this.line(charWidth, -charHeight, charShift, -charWidth, charHeight, charShift); this.line(-charWidth, charHeight, charShift, charWidth, charHeight, charShift); } // X Axis this.stroke(200, 0, 0); if (~(bits | ~Tree.X) === 0) { this.line(0, 0, 0, size, 0, 0); } if (~(bits | ~Tree._X) === 0) { this.line(0, 0, 0, -size, 0, 0); } // Y Axis this.stroke(0, 200, 0); if (~(bits | ~Tree.Y) === 0) { this.line(0, 0, 0, 0, size, 0); } if (~(bits | ~Tree._Y) === 0) { this.line(0, 0, 0, 0, -size, 0); } // Z Axis this.stroke(0, 100, 200); if (~(bits | ~Tree.Z) === 0) { this.line(0, 0, 0, 0, 0, size); } if (~(bits | ~Tree._Z) === 0) { this.line(0, 0, 0, 0, 0, -size); } this.pop(this._rendererState); }; p5.prototype.grid = function () { this._renderer.grid(...arguments); }; /** * Draws grid * @param {Number} size grid size in world units. Default is 100. * @param {Number} subdivisions number of grid subdivisions. Default is 10. * @param {Number} style either Tree.DOTS or Tree.SOLID. Default is Tree.DOTS. */ p5.RendererGL.prototype.grid = function ({ size = 100, subdivisions = 10, style = Tree.DOTS } = {}) { this._rendererState = this.push(); if (style === Tree.DOTS) { let weight = this.curStrokeWeight; // other useful as well: this.curStrokeColor this.curFillColor let posi = 0; let posj = 0; this.strokeWeight(weight * 2); this.beginShape(0x0000); for (let i = 0; i \u0026lt;= subdivisions; ++i) { posi = size * (2.0 * i / subdivisions - 1.0); for (let j = 0; j \u0026lt;= subdivisions; ++j) { posj = size * (2.0 * j / subdivisions - 1.0); this.vertex(posi, posj, 0); } } this.endShape(); const internalSub = 5; const subSubdivisions = subdivisions * internalSub; this.strokeWeight(weight); this.beginShape(0x0000); for (let i = 0; i \u0026lt;= subSubdivisions; ++i) { posi = size * (2.0 * i / subSubdivisions - 1.0); for (let j = 0; j \u0026lt;= subSubdivisions; ++j) { posj = size * (2.0 * j / subSubdivisions - 1.0); if (((i % internalSub) != 0) || ((j % internalSub) != 0)) this.vertex(posi, posj, 0); } } this.endShape(); } else { for (let i = 0; i \u0026lt;= subdivisions; ++i) { const pos = size * (2.0 * i / subdivisions - 1.0); this.line(pos, -size, 0, pos, +size, 0); this.line(-size, pos, 0, size, pos, 0); } } this.pop(this._rendererState); }; p5.prototype.cross = function () { this._renderer.cross(...arguments); }; /** * Draws a cross on the screen. * @param {p5.Matrix} mMatrix model space matrix origin to compute (x, y) from. * @param {Number} x screen x coordinate. Default is width / 2. * @param {Number} y screen y coordinate. Default is height / 2. * @param {Number} size cross size. Default is 50. */ p5.RendererGL.prototype.cross = function ({ mMatrix = this.mMatrix(), x, y, size = 50, eMatrix, pMatrix, vMatrix, pvMatrix } = {}) { if (!(x \u0026amp;\u0026amp; y)) { let screenLocation = this.treeLocation({ from: mMatrix, to: Tree.SCREEN, pMatrix: pMatrix, vMatrix: vMatrix, pvMatrix: pvMatrix }); x = screenLocation.x; y = screenLocation.y; size = size / this.pixelRatio(this.treeLocation({ from: mMatrix, to: Tree.WORLD, eMatrix: eMatrix })); } const half_size = size / 2.0; this._rendererState = this.push(); this.beginHUD(); this.line(x - half_size, y, x + half_size, y); this.line(x, y - half_size, x, y + half_size); this.endHUD(); this.pop(this._rendererState); }; p5.prototype.bullsEye = function () { this._renderer.bullsEye(...arguments); }; /** * Draws a bulls-eye on the screen. * @param {p5.Matrix} mMatrix model space matrix origin to compute (x, y) from. * @param {Number} x screen x coordinate. Default is width / 2. * @param {Number} y screen y coordinate. Default is height / 2. * @param {Number} size bullseye diameter. Default is 50. * @param {Number} shape either Tree.CIRCLE or Tree.SQUARE. Default is Tree.CIRCLE. */ p5.RendererGL.prototype.bullsEye = function ({ mMatrix = this.mMatrix(), x, y, size = 50, shape = Tree.CIRCLE, eMatrix, pMatrix, vMatrix, pvMatrix } = {}) { if (!(x \u0026amp;\u0026amp; y)) { let screenLocation = this.treeLocation({ from: mMatrix, to: Tree.SCREEN, pMatrix: pMatrix, vMatrix: vMatrix, pvMatrix: pvMatrix }); x = screenLocation.x; y = screenLocation.y; size = size / this.pixelRatio(this.treeLocation({ from: mMatrix, to: Tree.WORLD, eMatrix: eMatrix })); } this._rendererState = this.push(); if (shape === Tree.CIRCLE) { this.beginHUD(); this._circle({ x, y, radius: size / 2 }) this.endHUD(); } else { const half_length = size / 2.0; this.beginHUD(); this.line((x - half_length), (y - half_length) + (0.6 * half_length), (x - half_length), (y - half_length)); this.line((x - half_length), (y - half_length), (x - half_length) + (0.6 * half_length), (y - half_length)); this.line((x + half_length) - (0.6 * half_length), (y - half_length), (x + half_length), (y - half_length)); this.line((x + half_length), (y - half_length), (x + half_length), ((y - half_length) + (0.6 * half_length))); this.line((x + half_length), ((y + half_length) - (0.6 * half_length)), (x + half_length), (y + half_length)); this.line((x + half_length), (y + half_length), ((x + half_length) - (0.6 * half_length)), (y + half_length)); this.line((x - half_length) + (0.6 * half_length), (y + half_length), (x - half_length), (y + half_length)); this.line((x - half_length), (y + half_length), (x - half_length), ((y + half_length) - (0.6 * half_length))); this.endHUD(); } this.cross({ x: x, y: y, size: 0.6 * size }); this.pop(this._rendererState); }; p5.prototype._circle = function () { this._renderer._circle(...arguments); }; p5.RendererGL.prototype._circle = function ({ filled = false, x = this.width / 2, y = this.height / 2, radius = 100, detail = 50 } = {}) { this._rendererState = this.push(); if (filled) { this.beginShape(0x0005); for (let t = 0; t \u0026lt;= detail; t++) { const x = Math.cos(t * (2 * Math.PI) / detail); const y = Math.sin(t * (2 * Math.PI) / detail); this.vertex(0, 0, 0, 0.5, 0.5) this.vertex(radius * x, radius * y, 0, (x * 0.5) + 0.5, (y * 0.5) + 0.5); } this.endShape(); } else { this.translate(x, y); const angle = (2 * Math.PI) / detail; let lastPosition = { x: radius, y: 0 }; for (let i = 1; i \u0026lt;= detail; i++) { let position = { x: Math.cos(i * angle) * radius, y: Math.sin(i * angle) * radius }; this.line(lastPosition.x, lastPosition.y, position.x, position.y); lastPosition = position; } } this.pop(this._rendererState); }; p5.prototype.viewFrustum = function () { this._renderer.viewFrustum(...arguments); }; /** * Display fbo view frustum. * @param {p5.RendererGL | p5.Graphics} fbo renderer which viewing frustum is to be displayed. * @param {Number} bits bitwise view-frustum mask that may be composed of Tree.NEAR, Tree.FAR and Tree.BODY bits. * @param {Function} viewer callback fbo visual representation. */ p5.RendererGL.prototype.viewFrustum = function ({ fbo = _renderer, bits = Tree.NEAR | Tree.FAR, viewer = () =\u0026gt; this.axes({ size: 50, bits: Tree.X | Tree._X | Tree.Y | Tree._Y | Tree.Z | Tree._Z }) } = {}) { if (this === fbo) { console.error(\u0026#39;displaying viewFrustum requires an fbo different than this\u0026#39;); return; } this._rendererState = this.push(); this.resetMatrix(); this.applyMatrix(...this.vMatrix().mat4); this.applyMatrix(...fbo.eMatrix().mat4); fbo._isOrtho() ? this._viewOrtho(fbo, bits, viewer) : this._viewPerspective(fbo, bits, viewer); this.pop(this._rendererState); }; p5.RendererGL.prototype._viewOrtho = function (fbo, bits, viewer) { if (viewer !== Tree.NONE) { viewer(); } let l = fbo.lPlane(); let r = fbo.rPlane(); let b = fbo.bPlane(); let t = fbo.tPlane(); let n = fbo.nPlane(); let f = fbo.fPlane(); if (~(bits | ~Tree.FAR) === 0) { this.beginShape(); this.vertex(r, t, -f, 0, 0); this.vertex(l, t, -f, 1, 0); this.vertex(l, b, -f, 1, 1); this.vertex(r, b, -f, 0, 1); this.endShape(); } else { this.line(r, t, -f, l, t, -f); this.line(l, t, -f, l, b, -f); this.line(l, b, -f, r, b, -f); this.line(r, b, -f, r, t, -f); } if (~(bits | ~Tree.BODY) === 0) { this.beginShape(); this.vertex(l, t, -f); this.vertex(l, t, -n); this.vertex(r, t, -n); this.vertex(r, t, -f); this.endShape(); this.beginShape(); this.vertex(r, t, -f); this.vertex(r, t, -n); this.vertex(r, b, -n); this.vertex(r, b, -f); this.endShape(); this.beginShape(); this.vertex(r, b, -f); this.vertex(r, b, -n); this.vertex(l, b, -n); this.vertex(l, b, -f); this.endShape(); this.beginShape(); this.vertex(l, t, -n); this.vertex(l, t, -f); this.vertex(l, b, -f); this.vertex(l, b, -n); this.endShape(); } else { this.line(r, t, -n, r, t, -f); this.line(l, t, -n, l, t, -f); this.line(l, b, -n, l, b, -f); this.line(r, b, -n, r, b, -f); } // TODO implement near plane texture if (~(bits | ~Tree.NEAR) === 0) { this.beginShape(); this.vertex(r, t, -n, 0, 0); this.vertex(l, t, -n, 1, 0); this.vertex(l, b, -n, 1, 1); this.vertex(r, b, -n, 0, 1); this.endShape(); } else { this.line(r, t, -n, l, t, -n); this.line(l, t, -n, l, b, -n); this.line(l, b, -n, r, b, -n); this.line(r, b, -n, r, t, -n); } }; p5.RendererGL.prototype._viewPerspective = function (fbo, bits, viewer) { if (viewer !== Tree.NONE) { viewer(); } let magnitude = Math.tan(fbo.fov() / 2); let aspectRatio = fbo.width / fbo.height; const points = [ { x: 0, y: 0, z: 0 }, { x: 0, y: 0, z: 0 }, ]; points[0].z = fbo.nPlane(); points[1].z = fbo.fPlane(); points[0].y = points[0].z * magnitude; points[0].x = points[0].y * aspectRatio; const ratio = points[1].z / points[0].z; points[1].y = ratio * points[0].y; points[1].x = ratio * points[0].x; if (~(bits | ~Tree.FAR) === 0) { this.beginShape(); this.vertex(-points[1].x, points[1].y, -points[1].z, 0, 0); this.vertex(points[1].x, points[1].y, -points[1].z, 1, 0); this.vertex(points[1].x, -points[1].y, -points[1].z, 0, 1); this.vertex(-points[1].x, -points[1].y, -points[1].z, 1, 1); this.endShape(); } else { this.line(-points[1].x, points[1].y, -points[1].z, points[1].x, points[1].y, -points[1].z); this.line(points[1].x, points[1].y, -points[1].z, points[1].x, -points[1].y, -points[1].z); this.line(points[1].x, -points[1].y, -points[1].z, -points[1].x, -points[1].y, -points[1].z); this.line(-points[1].x, -points[1].y, -points[1].z, -points[1].x, points[1].y, -points[1].z); } if (~(bits | ~Tree.BODY) === 0) { this.beginShape(); this.vertex(-points[1].x, points[1].y, -points[1].z); this.vertex(-points[0].x, points[0].y, -points[0].z); this.vertex(points[0].x, points[0].y, -points[0].z); this.vertex(points[1].x, points[1].y, -points[1].z); this.endShape(); this.beginShape(); this.vertex(points[1].x, points[1].y, -points[1].z); this.vertex(points[0].x, points[0].y, -points[0].z); this.vertex(points[0].x, -points[0].y, -points[0].z); this.vertex(points[1].x, -points[1].y, -points[1].z); this.endShape(); this.beginShape(); this.vertex(points[1].x, -points[1].y, -points[1].z); this.vertex(points[0].x, -points[0].y, -points[0].z); this.vertex(-points[0].x, -points[0].y, -points[0].z); this.vertex(-points[1].x, -points[1].y, -points[1].z); this.endShape(); this.beginShape(); this.vertex(-points[0].x, points[0].y, -points[0].z); this.vertex(-points[1].x, points[1].y, -points[1].z); this.vertex(-points[1].x, -points[1].y, -points[1].z); this.vertex(-points[0].x, -points[0].y, -points[0].z); this.endShape(); this.line(0, 0, 0, points[0].x, points[0].y, -points[0].z); this.line(0, 0, 0, -points[0].x, points[0].y, -points[0].z); this.line(0, 0, 0, -points[0].x, -points[0].y, -points[0].z); this.line(0, 0, 0, points[0].x, -points[0].y, -points[0].z); } else { this.line(0, 0, 0, points[1].x, points[1].y, -points[1].z); this.line(0, 0, 0, -points[1].x, points[1].y, -points[1].z); this.line(0, 0, 0, -points[1].x, -points[1].y, -points[1].z); this.line(0, 0, 0, points[1].x, -points[1].y, -points[1].z); } // TODO implement near plane texture // Something along the lines // this.textureMode(NORMAL); // this.tint(255, 126); // Apply transparency without changing color // this.texture(fbo); // doesn\u0026#39;t work since this.texture is not found if (~(bits | ~Tree.NEAR) === 0) { this.beginShape(); this.vertex(-points[0].x, points[0].y, -points[0].z, 0, 0); this.vertex(points[0].x, points[0].y, -points[0].z, 1, 0); this.vertex(points[0].x, -points[0].y, -points[0].z, 0, 1); this.vertex(-points[0].x, -points[0].y, -points[0].z, 1, 1); this.endShape(); } else { this.line(-points[0].x, points[0].y, -points[0].z, points[0].x, points[0].y, -points[0].z); this.line(points[0].x, points[0].y, -points[0].z, points[0].x, -points[0].y, -points[0].z); this.line(points[0].x, -points[0].y, -points[0].z, -points[0].x, -points[0].y, -points[0].z); this.line(-points[0].x, -points[0].y, -points[0].z, -points[0].x, points[0].y, -points[0].z); } }; })(); function Plane(){ this.planeMaxMagR = 25; this.planeColor = \u0026#34;rgb(255, 247, 233)\u0026#34;; this.planeMagnitudeR = 0; this.planeRotateV = createVector(1,0,0); this.planeSize = createVector(200,200,0); //ancho y alto this.planePosition = createVector(0,0,0); this.draw = function(fbo){ fbo.fill(this.planeColor); fbo.translate(this.planePosition); fbo.plane(this.planeSize.x,this.planeSize.y) }; } class Wall { constructor(originX,originY,originZ,width,height,depth, fillColor){ this.fillColor = fillColor this.origin = createVector(originX,originY,originZ) this.width = width this.height = height this.depth = depth this.wallMax = createVector(originX+ width/2, originY+ height/2, originZ+ depth/2) this.wallMin = createVector(originX-width/2, originY-height/2, originZ - depth/2) } draw(fbo){ fbo.push() //fbo.line(this.wallMin.x,this.wallMin.y,this.wallMin.z,this.wallMax.x,this.wallMax.y,this.wallMax.z) fbo.fill(this.fillColor) fbo.translate(this.origin.x,this.origin.y,this.origin.z) fbo.box(this.width, this.height,this.depth) fbo.pop() }; closestPointSphere(B) { // get box closest point to sphere center by clamping const x = Math.max(this.wallMin.x, Math.min(B.spherePosition.x, this.wallMax.x)); const y = Math.max(this.wallMin.y, Math.min(B.spherePosition.y, this.wallMax.y)); const z = Math.max(this.wallMin.z, Math.min(B.spherePosition.z, this.wallMax.z)); // this is the same as isPointInsidespherePosition return createVector(x,y,z); } isPointInside(point) { return ( point.x \u0026gt;= this.wallMin.x \u0026amp;\u0026amp; point.x \u0026lt;= this.wallMax.x \u0026amp;\u0026amp; point.y \u0026gt;= this.wallMin.y \u0026amp;\u0026amp; point.y \u0026lt;= this.wallMax.y \u0026amp;\u0026amp; point.z \u0026gt;= this.wallMin.z \u0026amp;\u0026amp; point.z \u0026lt;= this.wallMax.z ); } collisionWithSphere(B){ let cPoint = this.closestPointSphere(B) const distance = Math.sqrt( (cPoint.x - B.spherePosition.x) * (cPoint.x - B.spherePosition.x) + (cPoint.y - B.spherePosition.y) * (cPoint.y - B.spherePosition.y) + (cPoint.z - B.spherePosition.z) * (cPoint.z - B.spherePosition.z) ); let sine = sqrt(1-sq(B.acceleration.z)); let cPointBouncing = undefined if(distance\u0026lt;B.sphereRadius){ let cPointM = getVectorModule(cPoint) let cPointDir = createVector(cPoint.x/cPointM,cPoint.y/cPointM,cPoint.z/cPointM) cPointBouncing = createVector(sine*cPointDir.x,-sine*cPointDir.y,cPointDir.z) //ajustar let testVec = createVector(cPointBouncing.x +cPoint.x,cPointBouncing.y +cPoint.y, cPointBouncing.z +cPoint.z) if(this.isPointInside(testVec)){ cPointBouncing = createVector(-sine*cPointDir.x,sine*cPointDir.y,cPointDir.z) } } return cPointBouncing } } let fbo1, cam1, fovy let P,B let mouseInitialV,mouseCurrentV let box let boxMax let boxMin let vectorCollision let wallsData let Walls let startData let finishData let startBox let finishBox let startTime let endTime let textTime let isGameStarted let isGameEnd function setup() { createCanvas(200, 200); initState() var resetBtn = createButton(\u0026#34;Reinicio\u0026#34;) resetBtn.position(0, 10); resetBtn.mousePressed(initState) } function draw() { if(!isGameEnd){ fbo1.background(120, 125, 115); fbo1.reset(); fbo1.perspective(PI/2.5); fbo1.rotate((PI/180)*P.planeMagnitudeR, P.planeRotateV); fbo1.strokeWeight(0.5) P.draw(fbo1); B.draw(fbo1); //Inicio y final: startBox.draw(fbo1) finishBox.draw(fbo1) if(finishBox.collisionWithSphere(B) \u0026amp;\u0026amp; isGameStarted){ isGameEnd = true textTime.style(\u0026#34;background-color\u0026#34;,\u0026#34;green\u0026#34;, \u0026#34;color\u0026#34;, \u0026#34;white\u0026#34;) textTime.style(\u0026#34;color\u0026#34;, \u0026#34;white\u0026#34;) } if(!startBox.collisionWithSphere(B) \u0026amp;\u0026amp; !isGameStarted){ isGameStarted = true startTime = second() } if(isGameStarted){ endTime = second() - startTime textTime.html(\u0026#34;Tiempo: \u0026#34;+ endTime + \u0026#34;s\u0026#34;) } drawListObjects(Walls, fbo1) // movimiento de la esfera vectorCollision = createVector(B.acceleration.x*B.sphereRadius+B.spherePosition.x, B.acceleration.y*B.sphereRadius+B.spherePosition.y,0) // fbo1.push() // fbo1.translate(vectorCollision.x,vectorCollision.y,vectorCollision.z) // fbo1.fill(\u0026#34;red\u0026#34;) // fbo1.sphere(5) // fbo1.pop() //console.log(vectorCollision.x); //Colisión con la pared let collisionV = collisionWalls(Walls, B) if(collisionV){ console.log(\u0026#34;Colisiones\u0026#34;, collisionWalls(Walls,B), B.acceleration) currentAccMod = getVectorModule(B.acceleration) //collisionV = createVector(B.acceleration.x, B.acceleration.y, B.acceleration.z) console.log(getVectorModule(B.acceleration), getVectorModule(collisionV)); B.move(P,collisionV, 0.6,true) } else{ console.log(\u0026#34;Normal\u0026#34;, B.acceleration) B.move(P, B.acceleration, 0.1, false) // if(P.planeRotateV.x != 0 || P.planeRotateV.y != 0){ // B.sphereMoveVector.x = (B.acceleration.x*0.1) + B.sphereMoveVector.x; // B.sphereMoveVector.y = (B.acceleration.y*0.1) + B.sphereMoveVector.y; // B.spherePosition.x = (B.sphereMoveVector.x*0.1) + B.spherePosition.x // B.spherePosition.y = (B.sphereMoveVector.y*0.1) + B.spherePosition.y; // }else if(P.planeRotateV.x == 0 \u0026amp;\u0026amp; P.planeRotateV.y == 0){ // B.sphereMoveVector = createVector(0,0,0); // B.acceleration = createVector(0,0,0); // } } //Colisión if(B.spherePosition.x \u0026gt;= B.minVertex.x \u0026amp;\u0026amp; B.spherePosition.y \u0026gt;= B.minVertex.y \u0026amp;\u0026amp; B.spherePosition.z-10 \u0026gt;= B.minVertex.z \u0026amp;\u0026amp; B.spherePosition.x \u0026lt;= B.maxVertex.x \u0026amp;\u0026amp; B.spherePosition.y \u0026lt;= B.maxVertex.y \u0026amp;\u0026amp; B.spherePosition.z-10 \u0026lt;= B.maxVertex.z){ P.planeColor = \u0026#34;white\u0026#34; } else{ P.planeColor = \u0026#34;rgba(255, 247, 233,1)\u0026#34; } beginHUD(); image(fbo1, 0, 0); endHUD(); } } function getVectorModule(vector){ return Math.sqrt(vector.x**2 +vector.y**2 +vector.z**2); } function mousePressed() { mouseInitialV = createVector(mouseX, mouseY, 0); } function mouseDragged(){ mouseCurrentV = createVector(mouseX, mouseY, 0); let vectorSubstra = createVector(mouseInitialV.x - mouseCurrentV.x, mouseInitialV.y - mouseCurrentV.y, mouseInitialV.z - mouseCurrentV.z); let mod = getVectorModule(vectorSubstra); let vectorDir = createVector(vectorSubstra.x/mod, vectorSubstra.y/mod, vectorSubstra.z/mod ); let sine = sqrt(1-sq(vectorDir.z)); B.acceleration = createVector(-sine*vectorDir.x, -sine*vectorDir.y, sine*vectorDir.z); let aux = vectorDir.x; vectorDir.x = vectorDir.y; vectorDir.y = -aux; if (mod \u0026lt; P.planeMaxMagR){ P.planeMagnitudeR = mod } P.planeRotateV = vectorDir; P.planeRotateV.z = 0; } function closestPoint(spherePosition, boxMin, boxMax) { // get box closest point to sphere center by clamping const x = Math.max(boxMin.x, Math.min(spherePosition.x, boxMax.x)); const y = Math.max(boxMin.y, Math.min(spherePosition.y, boxMax.y)); const z = Math.max(boxMin.z, Math.min(spherePosition.z, boxMax.z)); // this is the same as isPointInsidespherePosition return createVector(x,y,z); } function dataToWalls(wallsData){ let walls = wallsData.map(({x,y,z,width,height,depth, fillColor}) =\u0026gt;{ return new Wall(x,y,z,width,height,depth,fillColor) }) return walls } function drawListObjects(list, fbo){ list.forEach(object =\u0026gt;{ object.draw(fbo) }) } function collisionWalls(walls, B) { for(let i=0;i\u0026lt;walls.length; i++){ let cNewVector = walls[i].collisionWithSphere(B) if (cNewVector){ return cNewVector } } } function initState(){ startTime = 0 endTime = 0 isGameStarted = false isGameEnd = false textTime = createP(\u0026#39;this is some text\u0026#39;); textTime.html(\u0026#34;Tiempo: \u0026#34;) textTime.position(0, 350); textTime.style(\u0026#34;background-color\u0026#34;,\u0026#34;white\u0026#34;) startData = {width: \u0026#34;38\u0026#34;, height: \u0026#34;38\u0026#34;, depth: \u0026#34;2\u0026#34;, x: 92.5-38*4.5,y: 38*-1,z: 0, fillColor:\u0026#34;rgb(255, 115, 29)\u0026#34;} finishData = {width: \u0026#34;38\u0026#34;, height: \u0026#34;38\u0026#34;, depth: \u0026#34;2\u0026#34;, x: 92.5-38/2+2.5,y: 38*-2,z: 0, fillColor:\u0026#34;rgb(255, 115, 29)\u0026#34;} startBox = new Wall(startData.x, startData.y, startData.z, startData.width,startData.height, startData.depth,startData.fillColor) finishBox = new Wall(finishData.x, finishData.y, finishData.z, finishData.width,finishData.height, finishData.depth,finishData.fillColor) createCanvas(400, 400); wallsData = [{width: \u0026#34;200\u0026#34;, height: \u0026#34;10\u0026#34;, depth: \u0026#34;20\u0026#34;, x: 0,y: -100,z: 10, fillColor:\u0026#34;rgba(95, 157, 247,0.5)\u0026#34;}, {width: \u0026#34;10\u0026#34;, height: \u0026#34;200\u0026#34;, depth: \u0026#34;20\u0026#34;, x: 100,y: 0,z: 10, fillColor:\u0026#34;rgba(95, 157, 247,0.5)\u0026#34;}, {width: \u0026#34;10\u0026#34;, height: \u0026#34;200\u0026#34;, depth: \u0026#34;20\u0026#34;, x: -100,y: 0,z: 10, fillColor:\u0026#34;rgba(95, 157, 247,0.5)\u0026#34;}, //Fila 1 {width: 38, height: \u0026#34;5\u0026#34;, depth: \u0026#34;20\u0026#34;, x: 38*-2,y: 92.5-38*4,z: 10, fillColor:\u0026#34;rgba(95, 157, 247,0.5)\u0026#34;}, {width: 38, height: \u0026#34;5\u0026#34;, depth: \u0026#34;20\u0026#34;, x: 38*1,y: 92.5-38*4,z: 10, fillColor:\u0026#34;rgba(95, 157, 247,0.5)\u0026#34;}, //Fila 2 {width: \u0026#34;38\u0026#34;, height: \u0026#34;5\u0026#34;, depth: \u0026#34;20\u0026#34;, x: 38*-1,y: 92.5-38*3,z: 10, fillColor:\u0026#34;rgba(95, 157, 247,0.5)\u0026#34;}, //Fila3 {width: \u0026#34;38\u0026#34;, height: \u0026#34;5\u0026#34;, depth: \u0026#34;20\u0026#34;, x: 38*-2,y: 92.5-38*2,z: 10, fillColor:\u0026#34;rgba(95, 157, 247,0.5)\u0026#34;}, {width: \u0026#34;38\u0026#34;, height: \u0026#34;5\u0026#34;, depth: \u0026#34;20\u0026#34;, x: 0,y: 92.5-38*2,z: 10, fillColor:\u0026#34;rgba(95, 157, 247,0.5)\u0026#34;}, {width: \u0026#34;38\u0026#34;, height: \u0026#34;5\u0026#34;, depth: \u0026#34;20\u0026#34;, x: 38*2,y: 92.5-38*2,z: 10, fillColor:\u0026#34;rgba(95, 157, 247,0.5)\u0026#34;}, //Fila 4 {width: \u0026#34;38\u0026#34;, height: \u0026#34;5\u0026#34;, depth: \u0026#34;20\u0026#34;, x: 38*-1,y: 92.5-38,z: 10, fillColor:\u0026#34;rgba(95, 157, 247,0.5)\u0026#34;}, {width: \u0026#34;38\u0026#34;, height: \u0026#34;5\u0026#34;, depth: \u0026#34;20\u0026#34;, x: 0,y: 92.5-38,z: 10, fillColor:\u0026#34;rgba(95, 157, 247,0.5)\u0026#34;}, //Columna 1 {width: \u0026#34;5\u0026#34;, height: \u0026#34;38\u0026#34;, depth: \u0026#34;20\u0026#34;, x: 92.5-38*4,y: 38*-1,z: 10, fillColor:\u0026#34;rgba(95, 157, 247,0.5)\u0026#34;}, //Columna 2 {width: \u0026#34;5\u0026#34;, height: \u0026#34;38\u0026#34;, depth: \u0026#34;20\u0026#34;, x: 92.5-38*3,y: 38*-1,z: 10, fillColor:\u0026#34;rgba(95, 157, 247,0.5)\u0026#34;}, {width: \u0026#34;5\u0026#34;, height: \u0026#34;38\u0026#34;, depth: \u0026#34;20\u0026#34;, x: 92.5-38*3,y: 0,z: 10, fillColor:\u0026#34;rgba(95, 157, 247,0.5)\u0026#34;}, //Columna 3 {width: \u0026#34;5\u0026#34;, height: \u0026#34;38\u0026#34;, depth: \u0026#34;20\u0026#34;, x: 92.5-38*2,y: 0,z: 10, fillColor:\u0026#34;rgba(95, 157, 247,0.5)\u0026#34;}, {width: \u0026#34;5\u0026#34;, height: \u0026#34;38\u0026#34;, depth: \u0026#34;20\u0026#34;, x: 92.5-38*2,y: 38*1,z: 10, fillColor:\u0026#34;rgba(95, 157, 247,0.5)\u0026#34;}, //Columna 4 {width: \u0026#34;5\u0026#34;, height: \u0026#34;38\u0026#34;, depth: \u0026#34;20\u0026#34;, x: 92.5-38*1,y: 38*-2,z: 10, fillColor:\u0026#34;rgba(95, 157, 247,0.5)\u0026#34;}, {width: \u0026#34;5\u0026#34;, height: \u0026#34;38\u0026#34;, depth: \u0026#34;20\u0026#34;, x: 92.5-38*1,y: 0,z: 10, fillColor:\u0026#34;rgba(95, 157, 247,0.5)\u0026#34;}, {width: \u0026#34;5\u0026#34;, height: \u0026#34;38\u0026#34;, depth: \u0026#34;20\u0026#34;, x: 92.5-38*1,y: 38,z: 10, fillColor:\u0026#34;rgba(95, 157, 247,0.5)\u0026#34;}, {width: \u0026#34;200\u0026#34;, height: \u0026#34;10\u0026#34;, depth: \u0026#34;20\u0026#34;, x:0, y:100, z:0, fillColor:\u0026#34;rgba(95, 157, 247,0.5)\u0026#34;}, ] Walls = dataToWalls(wallsData) box = {width: \u0026#34;100\u0026#34;, height: \u0026#34;10\u0026#34;, depth: \u0026#34;20\u0026#34;, origin: createVector(0,50,10)} boxMax = createVector(box.origin.x+ box.width/2, box.origin.y+ box.height/2, box.origin.z+ box.depth/2) boxMin = createVector(box.origin.x- box.width/2, box.origin.y- box.height/2, box.origin.z- box.depth/2) console.log(\u0026#34;origin \u0026#34;, box.origin, \u0026#34;max: \u0026#34;, boxMin,\u0026#34;min: \u0026#34;, boxMax); fbo1 = createGraphics(width, height, WEBGL); // FBO camera cam1 = new Dw.EasyCam(fbo1._renderer, { distance: 200 }); let state1 = cam1.getState(); cam1.state_reset = state1; // state to use on reset (double-click/tap) cam1.setViewport([0, 0, width / 2, height]); document.oncontextmenu = function () { return false; } // scene interactions P = new Plane(); B = new Ball(P); } Conclusiones # P5.treegl Permitio que la realizacion del ejercicio fuera un poco mas simple de lo que se hubiese logrado a fuerza bruta, sin embargo p5.js presenta muchas desventajas al momento de simular fisicas en los objetos ya que para crearlos son pocos los parametros que existen por lo cual no se recomienda para personas no experimentadas. El Funcionamiento de tipo vectorial que existe en P5 permite una aproximacion matematica para la manipulacion del espacio y los objetos creados en el. Referencias # [1] “Reference | p5.js,” p5js.org. https://p5js.org/es/reference/ (accessed Oct. 18, 2022). [2] “p5.treegl,” GitHub, Sep. 12, 2022. https://github.com/VisualComputing/p5.treegl (accessed Oct. 18, 2022). [3] “Laberinto,” Wikipedia, Aug. 24, 2022. https://es.wikipedia.org/wiki/Laberinto (accessed Oct. 18, 2022). "},{"id":13,"href":"/visual_computing/docs/shortcodes/Taller-2/Rasterizacion/","title":"Rasterizacion","section":"Taller 2","content":" Rasterizacion # Objetivo # X\nMidpoint Circle Algorithm Midpoint Circle Algorithm # El algoritmo de dibujo de círculo de punto medio es un algoritmo utilizado para determinar los puntos necesarios para rasterizar un círculo. Usamos el algoritmo del punto medio para calcular todos los puntos del perímetro del círculo en el primer octante y luego los imprimimos junto con sus puntos de espejo en los otros octantes. Esto funcionará porque un círculo es simétrico con respecto a su centro. Triangle Rasterization Triangle rasterization # La rasterización es el proceso por el cual una imagen se transforma en un conjunto de pixeles, los cuales pueden ser mostrados a traves de una salida digital. Este procedimiento incluye el uso de diferentes algoritmos dependiendo de la figura que se vaya a rasterizar. Por ejemplo para razterizar un triangulo se necesita el desarrollo de dos pasos: Capturar su figura Recorrer su figura a traves de los pixeles Para el primer paso es necesario verificar si el triangulo encaja en alguna de las siguientes opciones: "},{"id":14,"href":"/visual_computing/docs/shortcodes/Taller-2/Rasterizacion/Midpoint-Circle-Algorithm/","title":"Midpoint Circle Algorithm","section":"Rasterizacion","content":" Midpoint Circle Algorithm # El algoritmo de dibujo de círculo de punto medio es un algoritmo utilizado para determinar los puntos necesarios para rasterizar un círculo.\nUsamos el algoritmo del punto medio para calcular todos los puntos del perímetro del círculo en el primer octante y luego los imprimimos junto con sus puntos de espejo en los otros octantes. Esto funcionará porque un círculo es simétrico con respecto a su centro.\nFormulas # Dado un circle centrado en (0,0) y un radio r. Teniendo un punto con coordenadas p(x,y)\n\\[F(p) = x^2\u0026#43;y^2-r^2\\] Name Matrix \\[F(p) \u0026lt; 0\\] El punto esta dentro del circulo \\[F(p) = 0\\] El punto esta en el perimetro \\[F(p) \u0026gt; 0\\] El punto esta fuera del circulo Midpoint circle algorithm function calculateOctant(middle) { x += 1; // Mid-point is inside or on the perimeter if (p \u0026lt;= 0) { p = p + 2 * x + 1; } else { y -= 1; p = p + 2 * x - 2 * y + 1; } const __x = x * space; const __y = y * space; savePointsCircle(__x, __y); if (fillCircle) { for (let i = 1; i \u0026lt; r; i++) { savePointsCircle(__x, __y - space * i); } } if (x \u0026gt;= y - 1) { return true; } return false; } "},{"id":15,"href":"/visual_computing/docs/shortcodes/Taller-2/Rasterizacion/Triangle-Rasterization/","title":"Triangle Rasterization","section":"Rasterizacion","content":" Triangle rasterization # La rasterización es el proceso por el cual una imagen se transforma en un conjunto de pixeles, los cuales pueden ser mostrados a traves de una salida digital. Este procedimiento incluye el uso de diferentes algoritmos dependiendo de la figura que se vaya a rasterizar.\nPor ejemplo para razterizar un triangulo se necesita el desarrollo de dos pasos:\nCapturar su figura Recorrer su figura a traves de los pixeles Para el primer paso es necesario verificar si el triangulo encaja en alguna de las siguientes opciones:\nSi no encaja en la figura BottomFlat o TopFlat, el triangulo debera partirse en dos como muestra la siguiente imagen:\nDe manera que los triangulos resultantes sean de tipo BottomFlat o TopFlat.\nPosteriormente se determinan los valores de x por donde pasa el triangulo, de forma que si el triangulo es de tipo BottomFlat, se recorra linea por linea de arriba abajo, y de izquierda a derecha y si es de tipo TopFlat de abajo hacia arriba y de izquierda a derecha.\nFormulas # La formula para determinar los valores de x antes mencionada es dependiente del tipo, asi con pa, pb y pc como puntos del triangulo, las formulas serian las siguientes:\nBottomFlat \\[ ext1 = (pb.x - pa.x) / (pb.y - pa.y); ext2 = (pc.x - pa.x) / (pc.y - pa.y); \\] TopFlat \\[ ext1 = (pc.x - pa.x) / (pc.y - pa.y); ext2 = (pc.x - pb.x) / (pc.y - pb.y); \\] Donde ext1 representa el expremo izquierdo de la fila y ext1 representa el expremo derecho de la fila que contiene el triangulo.\nRaterization algorithm let n1 = 500; let n2 = 420; let n3 = 258; let n4 = 420; let n5 = 486; let n6 = 275; let space = 20; var p1, p2, p3, p4; let puntos; let x,y; let beads; let beadSize = 20; let cols, rows; let num; function setup() { createCanvas(621, 621) cols = ceil(621 / beadSize); rows = ceil(621 / beadSize); beads = new Array(cols); for (let x = 0; x \u0026lt; cols; x++){ beads[x] = new Array(rows).fill(false); } organizeTriangle(); clasifyTriangle(); } function draw() { background(0,0,40); drawGrid(); paint(num); line(puntos[0].x, puntos[0].y, puntos[1].x, puntos[1].y); line(puntos[0].x, puntos[0].y, puntos[2].x, puntos[2].y); line(puntos[2].x, puntos[2].y, puntos[1].x, puntos[1].y); stroke(\u0026#34;red\u0026#34;); } function drawBeads(columnainicial, columnafinal,filas){ let filasm = filas + 1; let columnainicialm = columnainicial - 4; push(); noStroke(); //fill(0); fill(0, 179, 255); for (let i = columnainicialm; i \u0026lt;= columnafinal; i++){ for (let j = filas; j \u0026lt; filasm; j++){ square(i * beadSize, j * beadSize, beadSize); } } pop(); } function drawGrid(){ push(); stroke(200); for (let x = 0; x \u0026lt; 621; x+= beadSize){ line(x, 0, x, 621); } for (let y = 0; y \u0026lt; 621; y+= beadSize){ line(0, y, 621, y); } pop(); } function organizeTriangle(){ p1= { x: n1, y: n2 }; p2 = { x: n3, y: n4 }; p3 = { x: n5, y: n6 } puntos = [p1, p2, p3]; for (var i = 0; i \u0026lt; 3; i++) { for (var j = 0; j \u0026lt; 2; j++){ if(puntos[i].y \u0026gt; puntos[j+1].y ){ let punto = puntos[i]; puntos[i] = puntos[j + 1]; puntos[j + 1 ] = punto; } } } if(puntos[0].y == puntos[1].y){ if(puntos[0].x \u0026gt; puntos[1].x){ let punto = puntos[0]; puntos[0] = puntos[1]; puntos[1] = punto; } } } function clasifyTriangle(){ if (puntos[1].y == puntos[2].y) { num = 1; } else if (puntos[0].y == puntos[1].y) { num = 2; } else { num = 3; x = (int) (puntos[0].x + ((puntos[1].y - puntos[0].y) / (puntos[2].y - puntos[0].y)) * (puntos[2].x - puntos[0].x)); y = (int) (puntos[1].y); p4 = { x: x, y: y } //scanBottomFlatTriangle(puntos[0], puntos[1], p4); //scanTopFlatTriangle(p4, puntos[1], puntos[2]); } } function scanTopFlatTriangle(pa, pb, pc){ let invslope1 = (pc.x - pa.x) / (pc.y - pa.y); let invslope2 = (pc.x - pb.x) / (pc.y - pb.y); let curx1 = pc.x; let curx2 = pc.x; for (var scanlineY = pc.y; scanlineY \u0026lt; pa.y;scanlineY--) { scanLine(curx1, curx2, scanlineY); curx1 -= invslope1; curx2 -= invslope2; } } function scanBottomFlatTriangle(pa, pb, pc){ let invslope1 = parseInt((pb.x - pa.x) / (pb.y - pa.y)); let invslope2 = parseInt((pc.x - pa.x) / (pc.y - pa.y)); let curx1 = pa.x; let curx2 = pa.x; for (var scanlineY = pa.y; scanlineY \u0026lt;= pb.y;scanlineY++) { scanLine(curx1, curx2, scanlineY); curx1 += invslope1; curx2 += invslope2; } } function scanLine(curx1, curx2, scanlineY){ curx1 = parseInt(curx1/ beadSize); curx2 = parseInt(curx2 / beadSize); scanlineY = parseInt(scanlineY / beadSize); console.log(curx1); console.log(curx2); console.log(scanlineY); drawBeads(curx1, curx2,scanlineY); } function paint(num){ if(num == 1){ scanBottomFlatTriangle(puntos[0], puntos[1], puntos[2]); }else{ if(num == 2){ scanTopFlatTriangle(puntos[0], puntos[1], puntos[2]); } } } Referencias # https://brakeza.com/rasterizacion-del-triangulo#:~:text=El%20t%C3%A9rmino%20bajo%20el%20que,el%20interior%20de%20un%20tri%C3%A1ngulo.\n"},{"id":16,"href":"/visual_computing/docs/shortcodes/Taller-3/","title":"Taller 3","section":"Shortcodes","content":" Shaders # Objetivo # X\nAmbient Light Luz ambiente # La luz ambiente no suele tener un punto de origen definido. Se puede ver como una iluminación en todas direcciones. implementación # Cada pixel del objeto es definido mediante la formula \\[color = ambient * (uMaterialColor * uColor)\\] Donde color es el color final del pixel ambient es la cantidad de luminosidad uMaterialColor es el color del pixel original uColor es el color de ambiente elegido CODIGO: ambientLight. Coloring Color blending # Blending two colors is implemented by doing a component-wise multiplication between them CODIGO: blend.frag precision mediump float; // uniforms are emitted from the sketch // https://p5js.org/reference/#/p5.Shader/setUniform uniform vec4 uMaterial1; uniform vec4 uMaterial2; void main() { gl_FragColor = uMaterial1 * uMaterial2; } Color blending with lightness # Different blending modes # Image Processing Image Processing # El procesamiento de imagenes es la manipulación de imagenes mediante procesos computacionales manejados por GPU y el uso de algoritmos que modifican las imagenes. En muchos de los casos se utilizan operaciones matematicas de nivel matricial para transformar los colores de las imagenes, o distorsionarlas como se lograria con efectos de amplificación. 1. Procesamiento # Ejercicio 1: Implemente una aplicacion para el procesamiento de imagenes / videos que soporte el uso de diferentes mascaras, incluyendo kernels de tamaño diferente a 3x3 y: Non Euclidean Geometry Non Euclidean Geometry # Se denomina geometría no euclidiana o no euclídea, a cualquier sistema formal de geometría cuyos postulados y proposiciones difieren en algún asunto de los establecidos por Euclides en su tratado Elementos. No existe un solo sistema de geometría no euclídea, sino muchos, aunque si se restringe la discusión a espacios homogéneos, en los que la curvatura del espacio es la misma en cada punto, en los que los puntos del espacio son indistinguibles, pueden distinguirse tres formulaciones​ de geometrías Photomosaic Fotomosaico # El fotomosaico es una imagen, retrato o fotografía que se divide por figuras geométricas, generalmente por cuadrados o rectángulos del mismo tamaño, esto con el fin de remplazar las mismas por otros retratos, fotografías o imágenes que concuerden con los colores promedio que encierran las figuras geométricas de la imagen original, logrando que al visualizar la imagen de un punto lejano se logre ver como la original , pero que al ver de un punto cercano o al hacer zoom se pueda percibir que se compone de otras imágenes. Procedural Texturing Procedural Texturing # Problem statement # El texturizado procedimental es un método para generar texturas superficiales utilizando procedimientos o algoritmos matemáticos. Esta tecnica tiene muchas ventajas como: el bajo costo de almacenamiento, la resolución ilimitada de texturas y el facil mapeo de texturas. Este metodo tiene varios usos como: crear efectos esteticos, aumentar el agarre mecanico, disminuir la resistencia aerodinamica y modelar superficies o representaciones volumétricas de elementos naturales como madera , mármol , granito , metal , piedra y otros. Spatial Coherence Spatial Coherence # Problem statement # La coherencia espacial es el efecto visual por el cual los colores percibidos tienden a variar de manera proporcional a la distancia dentro de una determinada región de interes en la escena. Background # Por otra parte desde la perspectiva de la fisica, la coherencia espacial es la relación cruzada entre dos puntos en una onda en todo momento. Además de tambien ser una fuerte correlación entre los campos electricos en diferentes lugares, los cuales oscilan de forma correlacionada incluso si la estructura temporal se complica por una superposición de diferentes componentes de frecuencia. Texturing Texturing # La texturizacion es el proceso por el cual una imagen o mapa de bits es mapeado sobre un objeto 3D o una superficie, esto se logra trabajando con los sistemas coorddenados de las figuras y de la textura, la cual mediante el shader y la GPU son procesados haciendo uso de GLSL y algunos paradigmas de programacion, como programacion en paralelo. 1. Visualizacion UV # La visualizacion UV nos permite mostrar una textura sobre un espacio particular. "},{"id":17,"href":"/visual_computing/docs/shortcodes/Taller-3/Ambient-Light/","title":"Ambient Light","section":"Taller 3","content":" Luz ambiente # La luz ambiente no suele tener un punto de origen definido. Se puede ver como una iluminación en todas direcciones.\nimplementación # Cada pixel del objeto es definido mediante la formula\n\\[color = ambient * (uMaterialColor * uColor)\\] Donde color es el color final del pixel ambient es la cantidad de luminosidad uMaterialColor es el color del pixel original uColor es el color de ambiente elegido CODIGO: ambientLight.js let lightShader; let ambient; function preload() { lightShader = readShader(\u0026#39;../../../../sketches/shaders/diffuse/ambient.frag\u0026#39;, { varyings: Tree.NONE }); } function setup() { createCanvas(600, 450, WEBGL); // easycam stuff let state = { distance: 250, // scalar center: [0, 0, 0], // vector rotation: [0, 0, 0, 1], // quaternion }; easycam = createEasyCam(); easycam.state_reset = state; // state to use on reset (double-click/tap) easycam.setState(state, 2000); // now animate to that state perspective(); colorMode(RGB,1); // disable p5 lightning noLights(); ambient = createSlider(0, 1, 1.0, 0.05); ambient.position(420, 10); ambient.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); ambient.input(() =\u0026gt; { lightShader.setUniform(\u0026#39;ambient\u0026#39;, ambient.value()) }); lightShader.setUniform(\u0026#39;ambient\u0026#39;, 0); colorPicker = createColorPicker(color(1,1,1)); colorPicker.position(420,50) colorPicker.input(() =\u0026gt; { lightShader.setUniform(\u0026#39;uColor\u0026#39;, [red(colorPicker.color()), green(colorPicker.color()), blue(colorPicker.color()), 1.0]) }) lightShader.setUniform(\u0026#39;uColor\u0026#39;, [red(colorPicker.color()), green(colorPicker.color()), blue(colorPicker.color()), 1.0]) shader(lightShader); // ... // select initial brush } function draw() { background(120); push(); strokeWeight(0.8); stroke(\u0026#39;magenta\u0026#39;); grid({ dotted: false }); pop(); axes(); noStroke(); fill(1,0,1) push() translate(0,0,5) box(10,200,10); pop() fill(1,0,1) push() translate(0,0,5) box(200,10,10); pop() fill(0.8,0.3,0.3) push() translate(0,100,100) box(200,10,200); pop() fill(1,1,0) push() translate(100,0,100) box(10,200,200); pop() } function mouseWheel(event) { //comment to enable page scrolling return false; } function hexToRgb(hex) { hex = hex.replace(\u0026#39;#\u0026#39;, \u0026#39;\u0026#39;); var bigint = parseInt(hex, 16); var r = (bigint \u0026gt;\u0026gt; 16) \u0026amp; 255; var g = (bigint \u0026gt;\u0026gt; 8) \u0026amp; 255; var b = bigint \u0026amp; 255; return color(r, g, b); } Conclusiones # Por su facilidad y rapidez, se podría intentar acoplar a una interfaz de personalización de una aplicación. Referencias # [1] “Reference | p5.js,” p5js.org. https://p5js.org/es/reference/ (accessed Oct. 18, 2022). [2] “p5.treegl,” GitHub, Sep. 12, 2022. https://github.com/VisualComputing/p5.treegl (accessed Oct. 18, 2022). [3] “Graphics lighting,” Wikipedia, Nov. 25, 2022 .https://en.wikipedia.org/wiki/Computer_graphics_lighting (accessed Nov. 25-28, 2022). "},{"id":18,"href":"/visual_computing/docs/shortcodes/Taller-3/Coloring/","title":"Coloring","section":"Taller 3","content":" Color blending # Blending two colors is implemented by doing a component-wise multiplication between them CODIGO: blend.frag precision mediump float; // uniforms are emitted from the sketch // https://p5js.org/reference/#/p5.Shader/setUniform uniform vec4 uMaterial1; uniform vec4 uMaterial2; void main() { gl_FragColor = uMaterial1 * uMaterial2; } Color blending with lightness # Different blending modes # "},{"id":19,"href":"/visual_computing/docs/shortcodes/Taller-3/Image-Processing/","title":"Image Processing","section":"Taller 3","content":" Image Processing # El procesamiento de imagenes es la manipulación de imagenes mediante procesos computacionales manejados por GPU y el uso de algoritmos que modifican las imagenes. En muchos de los casos se utilizan operaciones matematicas de nivel matricial para transformar los colores de las imagenes, o distorsionarlas como se lograria con efectos de amplificación.\n1. Procesamiento # Ejercicio 1:\nImplemente una aplicacion para el procesamiento de imagenes / videos que soporte el uso de diferentes mascaras, incluyendo kernels de tamaño diferente a 3x3 y:\nUna Herramienta de region de interes para aplicar selectivamente una mascara: Una Herramienta de magnidicacion. Una herramienta que integre Luma y otras herramientas. Ejercicio 2.1:\nIncluir el canal azul en la visualizacion UV, ya sea Azul + Verde ó Azul + Rojo. Solucion Ejercicio 2.1:\nModificar el shader para que evalue 2 variables y reajuste el color dependiendo de una de las opciones seleccionadas, modificando uno de los canales dependiendo de la opcion. CODIGO: app.js let maskShader; let img; let video_src; let video_on; let cam_src; let cam_on; let ColorT; let mask_mode; let coloring; let lenses; //let maskmode; function preload() { video_src = createVideo([\u0026#39;/visual_computing/vid/drift.mp4\u0026#39;]); video_src.hide(); cam_src = createCapture(VIDEO); cam_src.size(width, height); cam_src.hide(); maskShader = readShader(\u0026#39;/visual_computing/sketches/shaders/mask.frag\u0026#39;, { varyings: Tree.texcoords2 }); img = loadImage(\u0026#39;/visual_computing/imgs/car.jpg\u0026#39;); } function setup() { createCanvas(700, 700, WEBGL); noStroke(); textureMode(NORMAL); //Camera selector cam_on = createCheckbox(\u0026#39;Live\u0026#39;, false); cam_on.style(\u0026#39;color\u0026#39;,\u0026#39;black\u0026#39;); cam_on.position(10,50); //Camera Controls cam_on.changed(() =\u0026gt; { if(cam_on.checked()){ maskShader.setUniform(\u0026#39;texture\u0026#39;,cam_src); }else{ maskShader.setUniform(\u0026#39;texture\u0026#39;, img); } }); //Video Controls video_on = createCheckbox(\u0026#39;Video\u0026#39;, false); video_on.style(\u0026#39;color\u0026#39;, \u0026#39;black\u0026#39;); video_on.position(10, 30); //Video \u0026amp; image Switcher video_on.changed(() =\u0026gt; { if (video_on.checked()) { maskShader.setUniform(\u0026#39;texture\u0026#39;, video_src); video_src.loop(); } else { maskShader.setUniform(\u0026#39;texture\u0026#39;, img); video_src.pause(); } }); //Mask controls mask_mode = createCheckbox(\u0026#39;Masks\u0026#39;, false); mask_mode.position(10, 10); mask_mode.style(\u0026#39;color\u0026#39;, \u0026#39;black\u0026#39;); //Coloring checkbox coloring = createCheckbox(\u0026#39;Coloring\u0026#39;,false); coloring.position(165, 10); coloring.style(\u0026#39;color\u0026#39;,\u0026#39;black\u0026#39;); //Lenses checkbox lenses = createCheckbox(\u0026#39;Lense\u0026#39;,false); lenses.position(360, 10); lenses.style(\u0026#39;color\u0026#39;,\u0026#39;black\u0026#39;); //Shader apply shader(maskShader); maskShader.setUniform(\u0026#39;texture\u0026#39;, img); emitTexOffset(maskShader, img, \u0026#39;texOffset\u0026#39;); //Kernel selector sel = createSelect(); sel.position(80, 10); sel.option(\u0026#39;None\u0026#39;); sel.option(\u0026#39;Edges\u0026#39;); sel.option(\u0026#39;Sharpen\u0026#39;); sel.option(\u0026#39;Box Blur\u0026#39;); sel.option(\u0026#39;Emboss\u0026#39;); sel.selected(\u0026#39;None\u0026#39;); //Coloring selector selC = createSelect(); selC.position(245, 10); selC.option(\u0026#39;None\u0026#39;); selC.option(\u0026#39;Luma\u0026#39;); selC.option(\u0026#39;Average\u0026#39;); selC.option(\u0026#39;HSV Value V\u0026#39;); selC.option(\u0026#39;HSL Value L\u0026#39;); selC.option(\u0026#39;Tint\u0026#39;); selC.selected(\u0026#39;None\u0026#39;); //Color Picker colorT = createColorPicker(color(255,255,255)); colorT.position(175, 30); //lenses parameters Rslider = createSlider(50.0, 150.0, 50.0); Rslider.position(360, 30); Rslider.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); let div1 = createDiv(\u0026#39;Lens Radio\u0026#39;); div1.style(\u0026#39;font-size\u0026#39;, \u0026#39;18px\u0026#39;); div1.style(\u0026#39;color\u0026#39;, \u0026#39;#000000\u0026#39;); div1.position(450, 30); Sslider = createSlider(0.0, 1.0, 0.0, 0.01); Sslider.position(360, 50); Sslider.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); let div2 = createDiv(\u0026#39;Lens Amplitude\u0026#39;); div2.style(\u0026#39;font-size\u0026#39;, \u0026#39;18px\u0026#39;); div2.style(\u0026#39;color\u0026#39;, \u0026#39;#000000\u0026#39;); div2.position(450, 50); } function draw() { background(0); //Mask Mode if (mask_mode.checked()){ //Enable Masks Mode maskShader.setUniform(\u0026#39;maskmode\u0026#39;,true); maskShader.setUniform(\u0026#39;coloringmode\u0026#39;,false); //kernels if (sel.value()==\u0026#39;Edges\u0026#39;) { maskShader.setUniform(\u0026#39;mask\u0026#39;, [-1, -1, -1, -1, 8, -1, -1, -1, -1]); }else if(sel.value()==\u0026#39;Sharpen\u0026#39;){ maskShader.setUniform(\u0026#39;mask\u0026#39;, [0, -1, 0, -1, 5, -1, 0, -1, 0]); }else if(sel.value()==\u0026#39;Box Blur\u0026#39;){ maskShader.setUniform(\u0026#39;mask\u0026#39;, [1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9]); }else if(sel.value()==\u0026#39;Emboss\u0026#39;){ maskShader.setUniform(\u0026#39;mask\u0026#39;, [-2, -1, 0, -1, 1, 1, 0, 1, 2]); }else{ maskShader.setUniform(\u0026#39;mask\u0026#39;, [0, 0, 0, 0, 1, 0, 0, 0, 0]); } }else if(coloring.checked()){ //Enable Coloring Mode maskShader.setUniform(\u0026#39;maskmode\u0026#39;,false); maskShader.setUniform(\u0026#39;coloringmode\u0026#39;,true); if(selC.value()==\u0026#34;None\u0026#34;){ maskShader.setUniform(\u0026#39;HSVV\u0026#39;,false); maskShader.setUniform(\u0026#39;HSLL\u0026#39;,false); maskShader.setUniform(\u0026#39;grey_scale\u0026#39;,false); maskShader.setUniform(\u0026#39;average\u0026#39;,false); maskShader.setUniform(\u0026#39;Tint\u0026#39;,false); }else if(selC.value()==\u0026#34;Luma\u0026#34;){ maskShader.setUniform(\u0026#39;grey_scale\u0026#39;,true); maskShader.setUniform(\u0026#39;average\u0026#39;,false); maskShader.setUniform(\u0026#39;HSVV\u0026#39;,false); maskShader.setUniform(\u0026#39;HSLL\u0026#39;,false); maskShader.setUniform(\u0026#39;Tint\u0026#39;,false); }else if(selC.value()==\u0026#34;Average\u0026#34;){ maskShader.setUniform(\u0026#39;average\u0026#39;,true); maskShader.setUniform(\u0026#39;grey_scale\u0026#39;,false); maskShader.setUniform(\u0026#39;HSVV\u0026#39;,false); maskShader.setUniform(\u0026#39;HSLL\u0026#39;,false); maskShader.setUniform(\u0026#39;Tint\u0026#39;,false); }else if(selC.value() ==\u0026#34;HSV Value V\u0026#34;){ maskShader.setUniform(\u0026#39;HSVV\u0026#39;,true); maskShader.setUniform(\u0026#39;HSLL\u0026#39;,false); maskShader.setUniform(\u0026#39;average\u0026#39;,false); maskShader.setUniform(\u0026#39;grey_scale\u0026#39;,false); maskShader.setUniform(\u0026#39;Tint\u0026#39;,false); }else if(selC.value() ==\u0026#34;HSL Value L\u0026#34;){ maskShader.setUniform(\u0026#39;HSLL\u0026#39;,true); maskShader.setUniform(\u0026#39;HSVV\u0026#39;,false); maskShader.setUniform(\u0026#39;average\u0026#39;,false); maskShader.setUniform(\u0026#39;grey_scale\u0026#39;,false); maskShader.setUniform(\u0026#39;Tint\u0026#39;,false); }else if(selC.value() ==\u0026#34;Tint\u0026#34;){ maskShader.setUniform(\u0026#39;Tint\u0026#39;,true); maskShader.setUniform(\u0026#39;HSLL\u0026#39;,false); maskShader.setUniform(\u0026#39;HSVV\u0026#39;,false); maskShader.setUniform(\u0026#39;average\u0026#39;,false); maskShader.setUniform(\u0026#39;grey_scale\u0026#39;,false); let RC = colorT.color(); maskShader.setUniform(\u0026#39;colorT\u0026#39;,[red(RC),green(RC),blue(RC),1.0]); } }else if(lenses.checked()){ maskShader.setUniform(\u0026#39;lensemode\u0026#39;,true); maskShader.setUniform(\u0026#39;maskmode\u0026#39;,false); maskShader.setUniform(\u0026#39;coloringmode\u0026#39;,false); maskShader.setUniform(\u0026#39;mouseData\u0026#39;,[mouseX,mouseY]); maskShader.setUniform(\u0026#39;resolution\u0026#39;,[width,height]); maskShader.setUniform(\u0026#39;radio\u0026#39;, Rslider.value()); maskShader.setUniform(\u0026#39;scale\u0026#39;, Sslider.value()); }else{ maskShader.setUniform(\u0026#39;lensemode\u0026#39;,false); maskShader.setUniform(\u0026#39;maskmode\u0026#39;,false); maskShader.setUniform(\u0026#39;coloringmode\u0026#39;,false); } quad(-width / 2, -height / 2, width / 2, -height / 2, width / 2, height / 2, -width / 2, height / 2); } CODIGO: mask.frag precision mediump float; uniform bool maskmode; uniform bool coloringmode; uniform bool lensemode; uniform bool grey_scale; uniform bool average; uniform bool HSVV; uniform bool HSLL; uniform bool Tint; uniform vec4 colorT; uniform sampler2D texture; uniform vec2 texOffset; uniform float mask[9]; varying vec2 texcoords2; uniform vec2 mouseData; uniform vec2 resolution; uniform vec4 passerGL; uniform float radio; uniform float scale; //-------------------------------------------------------------------------- float rim = 2.0; vec2 handview = vec2(10.0,50.0); vec2 curveGen(vec2 toPow, float dist){ float x = dist/radio; return toPow * (1.0 - x) * exp (-2.0 * x * x); } void Amplify (){ vec2 UV = gl_FragCoord.xy / resolution.xy; gl_FragColor = texture2D(texture, UV); vec2 center = mouseData.xy; float dist = distance(gl_FragCoord.xy,center); vec2 distV = gl_FragCoord.xy - center; if (dist \u0026gt; radio \u0026amp;\u0026amp; dist \u0026lt; radio + rim){ gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0); } if(abs(distV.x) \u0026lt; (handview.x / 2.0 ) \u0026amp;\u0026amp; abs(distV.y + radio) \u0026lt; (handview.y) \u0026amp;\u0026amp; dist \u0026gt;= radio + rim){ gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0); } if(dist \u0026lt; radio){ vec2 trueUV = (gl_FragCoord.xy - (curveGen(distV,dist) * scale)) / resolution.xy ; gl_FragColor = texture2D(texture, trueUV); } } //-------------------------------------------------------------------------- void Convolution(){ vec2 tc0 = texcoords2 + vec2(-texOffset.s, -texOffset.t); vec2 tc1 = texcoords2 + vec2( 0.0, -texOffset.t); vec2 tc2 = texcoords2 + vec2(+texOffset.s, -texOffset.t); vec2 tc3 = texcoords2 + vec2(-texOffset.s, 0.0); vec2 tc4 = texcoords2 + vec2( 0.0, 0.0); vec2 tc5 = texcoords2 + vec2(+texOffset.s, 0.0); vec2 tc6 = texcoords2 + vec2(-texOffset.s, +texOffset.t); vec2 tc7 = texcoords2 + vec2( 0.0, +texOffset.t); vec2 tc8 = texcoords2 + vec2(+texOffset.s, +texOffset.t); vec4 rgba[9]; rgba[0] = texture2D(texture, tc0); rgba[1] = texture2D(texture, tc1); rgba[2] = texture2D(texture, tc2); rgba[3] = texture2D(texture, tc3); rgba[4] = texture2D(texture, tc4); rgba[5] = texture2D(texture, tc5); rgba[6] = texture2D(texture, tc6); rgba[7] = texture2D(texture, tc7); rgba[8] = texture2D(texture, tc8); vec4 convolution; for (int i = 0; i \u0026lt; 9; i++) { convolution += rgba[i]*mask[i]; } gl_FragColor = vec4(convolution.rgb, 1.0); } //-------------------------------------------------------------------------- float luma(vec3 texel){ return 0.299 * texel.r + 0.587 * texel.g + 0.114 * texel.b; } float favg(vec3 texel){ return (texel.r + texel.g + texel.b ) / 3.0; } float HSV (vec3 texel){ return max(max(texel.r,texel.g),texel.b); ; } float HSL (vec3 texel){ float CMax = max(max(texel.r,texel.g),texel.b); float CMin = min(min(texel.r,texel.g),texel.b); return (CMax + CMin) / 2.0 ; } float Ftint(float channel, float color){ float N = channel * (color / 255.0); return N; } void Coloring(){ vec4 texel = texture2D(texture, texcoords2); if(grey_scale == true){ gl_FragColor = vec4((vec3(luma(texel.rgb))), 1.0); }else if(average == true){ gl_FragColor = vec4((vec3(favg(texel.rgb))), 1.0); }else if(HSVV== true){ gl_FragColor = vec4((vec3(HSV(texel.rgb))), 1.0); }else if(HSLL== true){ gl_FragColor = vec4((vec3(HSL(texel.rgb))), 1.0); }else if(Tint == true){ gl_FragColor = vec4(Ftint(texel.r,colorT.x),Ftint(texel.g,colorT.y),Ftint(texel.b,colorT.z),1.0); }else{ gl_FragColor = texel; } } //-------------------------------------------------------------------------- void main() { if(maskmode == true){ Convolution(); Coloring(); }else if(coloringmode == true){ Coloring(); }else if(lensemode == true){ Amplify(); }else{ gl_FragColor = texture2D(texture, texcoords2); } } "},{"id":20,"href":"/visual_computing/docs/shortcodes/Taller-3/Non-Euclidean-Geometry/","title":"Non Euclidean Geometry","section":"Taller 3","content":" Non Euclidean Geometry # Se denomina geometría no euclidiana o no euclídea, a cualquier sistema formal de geometría cuyos postulados y proposiciones difieren en algún asunto de los establecidos por Euclides en su tratado Elementos. No existe un solo sistema de geometría no euclídea, sino muchos, aunque si se restringe la discusión a espacios homogéneos, en los que la curvatura del espacio es la misma en cada punto, en los que los puntos del espacio son indistinguibles, pueden distinguirse tres formulaciones​ de geometrías\nnon_euclidean.frag precision mediump float; uniform sampler2D texture; uniform vec2 u_resolution; void main() { vec2 st = gl_FragCoord.xy / u_resolution; gl_FragColor = texture2D(texture, vec2(st.s, 1.0 - st.t)); } Cubo # "},{"id":21,"href":"/visual_computing/docs/shortcodes/Taller-3/Photomosaic/","title":"Photomosaic","section":"Taller 3","content":" Fotomosaico # El fotomosaico es una imagen, retrato o fotografía que se divide por figuras geométricas, generalmente por cuadrados o rectángulos del mismo tamaño, esto con el fin de remplazar las mismas por otros retratos, fotografías o imágenes que concuerden con los colores promedio que encierran las figuras geométricas de la imagen original, logrando que al visualizar la imagen de un punto lejano se logre ver como la original , pero que al ver de un punto cercano o al hacer zoom se pueda percibir que se compone de otras imágenes.\nFotomosaico # Fotomosaico por hardware # La implementación del fotomosaico se puede realizar a través de hardware, es decir, la construcción de un algoritmo que se encargue de convertir la imagen original en un mosaico de otras.\nEn la funcion preload definimos el fragmento a usar demoninado photomosaic.frag, a partir de ahi al mosaico final vamos a definir ciertos parametros que van a ser obtenidos al momento de recorrer la imagen, aqui se comparan los texeles del color promedio que posee cada pixel de la imagen o video original.\nLos colores promedio de la imagen original son comparados con la imagen devuelta por el quadrille, haciendo uso de una tolerancia que va aumentando hasta encontrar el color mas cercano al del original y de esta forma ese color encontrado es el que se usa para llenar en la imagen que se muestra como resultado.\nphotomosaic.js photomosaic.frag precision mediump float; const int num_images = 40; // source (image or video) is sent by the sketch uniform sampler2D source; // palette is sent by the sketch uniform sampler2D palette; // number of cols are sent by sketch uniform float cols; uniform float lumas[num_images]; uniform float red_palette[num_images]; uniform float green_palette[num_images]; uniform float blue_palette[num_images]; // toggles debug uniform bool debug; // toggles coloring uniform bool color_on; uniform vec4 background; uniform vec4 foreground; // target horizontal \u0026amp; vertical resolution uniform float resolution; // interpolated color (same name and type as in vertex shader) varying vec4 vVertexColor; // interpolated texcoord (same name and type as in vertex shader) varying vec2 vTexCoord; float luma(vec3 color) { return (0.299 * color.r + 0.587 * color.g + 0.114 * color.b); } void main() { vec2 fontCoord = vTexCoord * resolution; vec2 srcCoord = floor(fontCoord); fontCoord = fontCoord - srcCoord; srcCoord = srcCoord / vec2(resolution); float mid = 1.0/(2.0*resolution); srcCoord = srcCoord + vec2(mid); vec4 key = texture2D(source, srcCoord); if (debug) { gl_FragColor = key; } else { float lumakey = luma(key.rgb); float selected = 0.0; bool complete = false; for(float j = 0.02; j \u0026lt;= 0.5; j += 0.02){ for(int i = 0 ; i \u0026lt; num_images; i ++) { if((red_palette[i]/255.0\u0026gt; (key.r - j) \u0026amp;\u0026amp; red_palette[i]/255.0 \u0026lt; (key.r + j)) \u0026amp;\u0026amp; (green_palette[i]/255.0\u0026gt; (key.g - j) \u0026amp;\u0026amp; green_palette[i]/255.0 \u0026lt; (key.g + j)) \u0026amp;\u0026amp; (blue_palette[i]/255.0\u0026gt; (key.b - j) \u0026amp;\u0026amp; blue_palette[i]/255.0 \u0026lt; (key.b + j))){ selected = float(i); complete = true; break; } } if(complete){ break; } } vec2 tile = vec2((floor(selected) + fontCoord.x) / cols, fontCoord.y); vec4 paletteTexel = texture2D(palette, tile); gl_FragColor = paletteTexel; } } photomosaic.js function preload() { image_src = loadImage(\u0026#39;/visual_computing/imgs/car.jpg\u0026#39;); video_src = createVideo([\u0026#39;/visual_computing/vid/drift.mp4\u0026#39;]); video_src.hide(); // by default video shows up in separate dom mosaic = readShader(\u0026#39;/visual_computing/sketches/shaders/photomosaic.frag\u0026#39;); p = []; for (let i = 1; i \u0026lt;= 40; i++) { if (i.toString().length == 1) { p.push(loadImage(`/visual_computing/imgs/cars/00000${i}.jpg`)); } else { p.push(loadImage(`/visual_computing/imgs/cars/0000${i}.jpg`)); } } } function sample() { if (pg.width !== SAMPLE_RES * imageCells.width) { pg = createGraphics(SAMPLE_RES * imageCells.width, SAMPLE_RES); mosaic.setUniform(\u0026#34;cols\u0026#34;, imageCells.width); } imageCells.sort({ ascending: true, cellLength: SAMPLE_RES, mode: \u0026#34;LUMA\u0026#34;, }); luma = imageCells.saveLuma({ cellLength: SAMPLE_RES, }); rgb = imageCells.saveRGB({ cellLength: SAMPLE_RES, }); drawQuadrille(imageCells, { graphics: pg, cellLength: SAMPLE_RES, outlineWeight: 0, }); mosaic.setUniform(\u0026#34;palette\u0026#34;, pg); mosaic.setUniform(\u0026#34;lumas\u0026#34;, luma); mosaic.setUniform(\u0026#34;red_palette\u0026#34;, rgb.r); mosaic.setUniform(\u0026#34;green_palette\u0026#34;, rgb.g); mosaic.setUniform(\u0026#34;blue_palette\u0026#34;, rgb.b); } Referencias # [1] “Shaders” github.com https://github.com/mattdesl/lwjgl-basics/wiki/Shaders (Mar. 8, 2020). "},{"id":22,"href":"/visual_computing/docs/shortcodes/Taller-3/Procedural-Texturing/","title":"Procedural Texturing","section":"Taller 3","content":" Procedural Texturing # Problem statement # El texturizado procedimental es un método para generar texturas superficiales utilizando procedimientos o algoritmos matemáticos. Esta tecnica tiene muchas ventajas como: el bajo costo de almacenamiento, la resolución ilimitada de texturas y el facil mapeo de texturas.\nEste metodo tiene varios usos como: crear efectos esteticos, aumentar el agarre mecanico, disminuir la resistencia aerodinamica y modelar superficies o representaciones volumétricas de elementos naturales como madera , mármol , granito , metal , piedra y otros.\nBackground # Ahora bien, para aplicar una textura por medio del Procedural Texturing se necesita primero las coordenadas de textura, estas son las coordenadas de los vértices del objeto en un espacio 2D, que generalmente llamamos st o espacio de textura.Estas nos brindan un marco de referencia con el que podemos trabajar y crear todo tipo de patrones 2D, es decir que a lo largo del eje x, generalmente denotamos las coordenadas s y a lo largo del eje y las coordenadas t.\nDicho lo anterior para asignar un elemento de la textura a un elemento de pantalla se buscan las coordenadas de textura de ese elemento tomando al espacio de textura como un espacio de coordenadas entre (0,0) y (1,1) como se muestra en la siguiente imagen:\nEsto se da para que una misma coordenada de textura se pueda asignar a diferentes texturas, como se ve en la siguiente imagen:\nDonde la coordenada de textura es (0.5,1.0) y las texturas tienen diferentes tamaños por lo que la textura 1, se le asigna a texel (2,4) y La textura 2 se asigna a texel (3,6).\nLa explicación simplificada del proeso de asignación de coordenadas de textura a espacio de pantalla se muestra en la siguiente imagen:\nEn este ejemplo, un píxel, que se muestra a la izquierda de la ilustración, se idealiza en un cuadrado de color. Las direcciones de las cuatro esquinas del píxel se asignan a la primitiva 3D en el espacio del objeto(La forma del píxel a menudo se distorsiona debido a la forma de la primitiva en el espacio 3D y al ángulo de visión), las esquinas del área de la superficie de la primitiva que corresponden a las esquinas del píxel se mapean en el espacio de textura. El proceso de mapeo vuelve a distorsionar la forma del píxel, lo cual es común. El valor de color final del píxel se calcula a partir de los téxeles en la región a la que se asigna el píxel.\nCode # A continuación algunos ejemplos:\nAplicamos el siguiente patron a una esfera:\nResultado:\nCODIGO: Esfera.frag Codigo generado usando el editor web de P5.js.\n#ifdef GL_ES precision mediump float; #endif #define PI 3.14159265358979323846 uniform vec2 u_resolution; uniform float u_time; vec2 rotate2D (vec2 _st, float _angle) { _st -= 0.5; _st = mat2(cos(_angle),-sin(_angle), sin(_angle),cos(_angle)) * _st; _st += 0.5; return _st; } vec2 tile (vec2 _st, float _zoom) { _st *= _zoom; return fract(_st); } vec2 rotateTilePattern(vec2 _st){ _st *= 4.0; // Give each cell an index number // according to its position float index = 0.0; index += step(1., mod(_st.x,2.0)); index += step(1., mod(_st.y,2.0))*2.0; _st = fract(_st); if(index == 1.0){ // Rotate cell 1 by -90 degrees _st = rotate2D(_st,PI*-0.5); }else if(index == 2.0){ // Rotate cell 2 by -90 degrees _st = rotate2D(_st,PI*-0.5); } return _st; } void main (void) { vec2 st = gl_FragCoord.xy/u_resolution.xy; st = tile(st,3.0); st = rotateTilePattern(st); gl_FragColor = vec4(vec3(step(st.x,st.y)),1.0); } //Fuente: https://thebookofshaders.com/09/ Aplicamos el siguiente patron a un cubo:\nResultado:\nCODIGO: Cubo.frag Codigo generado usando el editor web de P5.js.\n#ifdef GL_ES precision mediump float; #endif #define PI 3.14159265359 uniform vec2 u_resolution; uniform vec2 u_mouse; uniform float u_time; float plot(vec2 st, float pct){ return 0.0 ; } void main() { vec2 st = gl_FragCoord.xy/u_resolution; vec2 mt = vec2(sin(u_time),cos(u_time)); float y = sin(st.x*PI*3.000); float altura = abs( pow(mt.x*cos(st.x*PI*2.4),3.0) +pow(mt.y*sin(st.y*PI*2.040),2.0)); vec3 color = vec3(altura); float pct = plot(st,y); color = (1.0-pct)*color+pct*vec3(0.524,0.570,0.565); gl_FragColor = vec4(color.rg,1.144,0.944); } Conclusiones # Este no solo es un metodo sencillo sino tambien uno muy practico con el cual se pueden replican un sinfin de texturas.\nReferencias # https://learn.microsoft.com/en-us/windows/win32/direct3d9/texture-coordinates\n"},{"id":23,"href":"/visual_computing/docs/shortcodes/Taller-3/Spatial-Coherence/","title":"Spatial Coherence","section":"Taller 3","content":" Spatial Coherence # Problem statement # La coherencia espacial es el efecto visual por el cual los colores percibidos tienden a variar de manera proporcional a la distancia dentro de una determinada región de interes en la escena.\nBackground # Por otra parte desde la perspectiva de la fisica, la coherencia espacial es la relación cruzada entre dos puntos en una onda en todo momento. Además de tambien ser una fuerte correlación entre los campos electricos en diferentes lugares, los cuales oscilan de forma correlacionada incluso si la estructura temporal se complica por una superposición de diferentes componentes de frecuencia. Este es un requisito fundamental para la direccionalidad de los rayos laser.\nEjemplo # Codigo # https://editor.p5js.org/acardenaso/sketches/KHkc3J1pF\nReferencias # https://editor.p5js.org/oshoham/sketches/aAc4D3BBma\nReferencias # https://byjus.com/jee/coherence-and-coherent-sources/#:~:text=Spatial%20coherence%20can%2C%20therefore%2C%20be,a%20wave%20at%20all%20times.\nhttps://www.rp-photonics.com/coherence.html\n"},{"id":24,"href":"/visual_computing/docs/shortcodes/Taller-3/Texturing/","title":"Texturing","section":"Taller 3","content":" Texturing # La texturizacion es el proceso por el cual una imagen o mapa de bits es mapeado sobre un objeto 3D o una superficie, esto se logra trabajando con los sistemas coorddenados de las figuras y de la textura, la cual mediante el shader y la GPU son procesados haciendo uso de GLSL y algunos paradigmas de programacion, como programacion en paralelo.\n1. Visualizacion UV # La visualizacion UV nos permite mostrar una textura sobre un espacio particular.\nEjercicio 1:\nRedefinir las coordenas de la figura texturizada para invertir la orientacion vertical de la imagen. Solucion Ejercicio 1:\nRedefinir las coordenadas [u] y [v] de los vertex definidos en uv.js para que cada punto del clip space mapeara a su inverso en el texture space. CODIGO: uv_inverse.js let uvShader; function preload() { uvShader = readShader(\u0026#39;/visual_computing/sketches/shaders/uv.frag\u0026#39;, { matrices: Tree.NONE, varyings: Tree.texcoords2 }); } function setup() { createCanvas(300, 300, WEBGL); noStroke(); shader(uvShader); textureMode(NORMAL); } function draw() { background(0); beginShape(); vertex(-1, -1, 0, 0, 1); vertex( 1, -1, 0, 1, 1); vertex( 1, 1, 0, 1, 0); vertex(-1, 1, 0, 0, 0); endShape(); } CODIGO: uv.frag precision mediump float; varying vec2 texcoords2; void main() { gl_FragColor = vec4(texcoords2.xy, 0.0, 1.0); } 2. 3D # La visualizacion 3D de espaciosUV nos permite mostrar una textura sobre un objeto particular en un espacio que permite la interaccion 3D, sin embargo esto no altera en demasia .\nEjercicio 2.1:\nIncluir el canal azul en la visualizacion UV, ya sea Azul + Verde ó Azul + Rojo. Solucion Ejercicio 2.1:\nModificar el shader para que evalue 2 variables y reajuste el color dependiendo de una de las opciones seleccionadas, modificando uno de los canales dependiendo de la opcion. CODIGO: uvplus.js let easycam; let uvShader; let c1, c2; let rtb = false, gtb = false; function preload() { uvShader = readShader(\u0026#39;/visual_computing/sketches/shaders/uvplus.frag\u0026#39;,{ matrices: Tree.pmvMatrix, varyings: Tree.texcoords2 }); } function setup() { createCanvas(300, 300, WEBGL); textureMode(NORMAL); c1 = createCheckbox(\u0026#39;Red To Blue\u0026#39;, false); c2 = createCheckbox(\u0026#39;Green To Blue\u0026#39;, false); c1.position(10, 310); c2.position(150, 310); shader(uvShader); } function draw() { background(200); orbitControl(); axes(); push(); noStroke(); quad(-width / 2, -height / 2, width / 2, -height / 2, width / 2, height / 2, -width / 2, height / 2); pop(); if(c1.checked()){ uvShader.setUniform(\u0026#39;rtb\u0026#39;,true) uvShader.setUniform(\u0026#39;gtb\u0026#39;,false) }else if(c2.checked()){ uvShader.setUniform(\u0026#39;rtb\u0026#39;,false) uvShader.setUniform(\u0026#39;gtb\u0026#39;,true) }else{ uvShader.setUniform(\u0026#39;rtb\u0026#39;,false) uvShader.setUniform(\u0026#39;gtb\u0026#39;,false) } } function mouseWheel(event) { return false; } CODIGO: uvplus.frag precision mediump float; uniform bool rtb; uniform bool gtb; varying vec2 texcoords2; void main() { if(rtb==true){ gl_FragColor = vec4(0.0 ,texcoords2.y,texcoords2.x, 1.0); }else if(gtb==true){ gl_FragColor = vec4(texcoords2.x , 0.0, texcoords2.y, 1.0); }else{ gl_FragColor = vec4(texcoords2.xy, 0.0, 1.0); } } Ejercicio 2.2:\nUtilizar figuras diferentes a Quad como filtros de pantalla. Solucion Ejercicio 2.2:\nModificar las figuras mediante la definicion de metodos y figuras de P5, añadir el control de opacidad y el cambio de canales [RGB]. CODIGO: screen.js let easycam; let uvShader; let opacity; let c1, c2; let rtb = false, gtb = false; function preload() { uvShader = readShader(\u0026#39;/visual_computing/sketches/shaders/screen.frag\u0026#39;,{ matrices: Tree.pmvMatrix, varyings: Tree.texcoords2 }); } function setup() { createCanvas(450, 450, WEBGL); // easycam stuff let state = { distance: 250, center: [0, 0, 0], rotation: [0, 0, 0, 1], }; easycam = createEasyCam(); easycam.state_reset = state; easycam.setState(state, 2000); textureMode(NORMAL); opacity = createSlider(0, 1, 0.5, 0.01); opacity.position(10, 25); opacity.style(\u0026#39;width\u0026#39;, \u0026#39;280px\u0026#39;); c1 = createCheckbox(\u0026#39;R To B\u0026#39;, false); c2 = createCheckbox(\u0026#39;G To B\u0026#39;, false); c1.position(100, 10); c2.position(200, 10); sel = createSelect(); sel.position(10, 10); sel.option(\u0026#39;Quad\u0026#39;); sel.option(\u0026#39;Triangle\u0026#39;); sel.option(\u0026#39;Circle\u0026#39;); sel.selected(\u0026#39;Quad\u0026#39;); } function draw() { background(200); resetShader(); axes(); grid(); translate(0, -70); rotateY(0.5); fill(color(255, 0, 255, 125)); box(30, 50); translate(70, 70); fill(color(0, 255, 255, 125)); sphere(30, 50); shader(uvShader); uvShader.setUniform(\u0026#39;opacity\u0026#39;, opacity.value()); beginHUD(); noStroke(); if(sel.value() == \u0026#34;Quad\u0026#34;){ quad(0, 0, width, 0, width, height, 0, height); }else if(sel.value() == \u0026#34;Triangle\u0026#34;){ triangle(0,0,width,0,width/2,height) }else if (sel.value() == \u0026#34;Circle\u0026#34;){ circle(width/2,height/2,width) } if(c1.checked()){ uvShader.setUniform(\u0026#39;rtb\u0026#39;,true) uvShader.setUniform(\u0026#39;gtb\u0026#39;,false) }else if(c2.checked()){ uvShader.setUniform(\u0026#39;rtb\u0026#39;,false) uvShader.setUniform(\u0026#39;gtb\u0026#39;,true) }else{ uvShader.setUniform(\u0026#39;rtb\u0026#39;,false) uvShader.setUniform(\u0026#39;gtb\u0026#39;,false) } endHUD(); } function mouseWheel(event) { //comment to enable page scrolling return false; } CODIGO: screen.frag precision mediump float; uniform bool rtb; uniform bool gtb; uniform float opacity; varying vec2 texcoords2; void main() { if(rtb==true){ gl_FragColor = vec4(0.0 ,texcoords2.y,texcoords2.x, opacity); }else if(gtb==true){ gl_FragColor = vec4(texcoords2.x , 0.0, texcoords2.y, opacity); }else{ gl_FragColor = vec4(texcoords2.xy, 0.0, opacity); } } 3. Muestreo de Texturas # Los efectos que puedan aplicarse a una imagen requieren utilizar coordenaddas dadas, las coordenadas texcoords2 y los texels permiten realizar operaciones pixel a pixel haciendo uso de la GPU .\nEjercicio 3.1 y 3.2:\nImplementar heraamientas de iluminacion i color tales como HSV valor V, HSL luminancia L, Promedio de componentes. Implementar el tintado de texturas mezclando el colo y los datos interpolados de los texeles. Solucion Ejercicio 3.1 y 3.2:\nPara modificar la imagen se opera matematicamente los valores que se obtienen en los texels [Canales RGBA] , o se modifican de plano para que el shader los procese nuevamente. CODIGO: tools.js let lumaShader; let img; let grey_scale; let average; let HSVV; let Tint; let ColorT; function preload() { lumaShader = readShader(\u0026#39;/visual_computing/sketches/shaders/colors.frag\u0026#39;,{ varyings: Tree.texcoords2}); img = loadImage(\u0026#39;/visual_computing/imgs/car.jpg\u0026#39;); } function drawControls(enabled){ if(enabled){ colorT = createColorPicker(color(255,255,255)); colorT.position(125, 10); } } function setup() { createCanvas(700, 500, WEBGL); noStroke(); textureMode(NORMAL); sel = createSelect(); sel.position(10, 10); sel.option(\u0026#39;None\u0026#39;); sel.option(\u0026#39;Luma\u0026#39;); sel.option(\u0026#39;Average\u0026#39;); sel.option(\u0026#39;HSV Value V\u0026#39;); sel.option(\u0026#39;HSL Value L\u0026#39;); sel.option(\u0026#39;Tint\u0026#39;); sel.selected(\u0026#39;None\u0026#39;); drawControls(true); } function draw() { background(0); if(sel.value()==\u0026#34;None\u0026#34;){ shader(lumaShader); lumaShader.setUniform(\u0026#39;texture\u0026#39;, img); lumaShader.setUniform(\u0026#39;HSVV\u0026#39;,false); lumaShader.setUniform(\u0026#39;HSLL\u0026#39;,false); lumaShader.setUniform(\u0026#39;grey_scale\u0026#39;,false); lumaShader.setUniform(\u0026#39;average\u0026#39;,false); }else if(sel.value()==\u0026#34;Luma\u0026#34;){ shader(lumaShader); lumaShader.setUniform(\u0026#39;grey_scale\u0026#39;,true); lumaShader.setUniform(\u0026#39;average\u0026#39;,false); lumaShader.setUniform(\u0026#39;HSVV\u0026#39;,false); lumaShader.setUniform(\u0026#39;HSLL\u0026#39;,false); lumaShader.setUniform(\u0026#39;texture\u0026#39;, img); }else if(sel.value()==\u0026#34;Average\u0026#34;){ shader(lumaShader); lumaShader.setUniform(\u0026#39;average\u0026#39;,true); lumaShader.setUniform(\u0026#39;grey_scale\u0026#39;,false); lumaShader.setUniform(\u0026#39;HSVV\u0026#39;,false); lumaShader.setUniform(\u0026#39;HSLL\u0026#39;,false); lumaShader.setUniform(\u0026#39;texture\u0026#39;, img); }else if(sel.value() ==\u0026#34;HSV Value V\u0026#34;){ shader(lumaShader); lumaShader.setUniform(\u0026#39;HSVV\u0026#39;,true); lumaShader.setUniform(\u0026#39;HSLL\u0026#39;,false); lumaShader.setUniform(\u0026#39;average\u0026#39;,false); lumaShader.setUniform(\u0026#39;grey_scale\u0026#39;,false); lumaShader.setUniform(\u0026#39;texture\u0026#39;, img); }else if(sel.value() ==\u0026#34;HSL Value L\u0026#34;){ shader(lumaShader); lumaShader.setUniform(\u0026#39;HSLL\u0026#39;,true); lumaShader.setUniform(\u0026#39;HSVV\u0026#39;,false); lumaShader.setUniform(\u0026#39;average\u0026#39;,false); lumaShader.setUniform(\u0026#39;grey_scale\u0026#39;,false); lumaShader.setUniform(\u0026#39;texture\u0026#39;, img); }else if(sel.value() ==\u0026#34;Tint\u0026#34;){ shader(lumaShader); lumaShader.setUniform(\u0026#39;Tint\u0026#39;,true); lumaShader.setUniform(\u0026#39;HSLL\u0026#39;,false); lumaShader.setUniform(\u0026#39;HSVV\u0026#39;,false); lumaShader.setUniform(\u0026#39;average\u0026#39;,false); lumaShader.setUniform(\u0026#39;grey_scale\u0026#39;,false); lumaShader.setUniform(\u0026#39;texture\u0026#39;, img); let RC = colorT.color(); lumaShader.setUniform(\u0026#39;colorT\u0026#39;,[red(RC),green(RC),blue(RC),1.0]); } quad(-width / 2, -height / 2, width / 2, -height / 2, width / 2, height / 2, -width / 2, height / 2); } CODIGO: colors.frag precision mediump float; uniform bool grey_scale; uniform bool average; uniform bool HSVV; uniform bool HSLL; uniform bool Tint; uniform vec4 colorT; uniform sampler2D texture; varying vec2 texcoords2; float luma(vec3 texel) { return 0.299 * texel.r + 0.587 * texel.g + 0.114 * texel.b; } float favg(vec3 texel){ return (texel.r + texel.g + texel.b ) / 3.0; } float HSV (vec3 texel){ return max(max(texel.r,texel.g),texel.b); ; } float HSL (vec3 texel){ float CMax = max(max(texel.r,texel.g),texel.b); float CMin = min(min(texel.r,texel.g),texel.b); return (CMax + CMin) / 2.0 ; } float Ftint(float channel, float color){ float N = channel * (color / 255.0); return N; } void main() { vec4 texel = texture2D(texture, texcoords2); if(grey_scale == true){ gl_FragColor = vec4((vec3(luma(texel.rgb))), 1.0); }else if(average == true){ gl_FragColor = vec4((vec3(favg(texel.rgb))), 1.0); }else if(HSVV== true){ gl_FragColor = vec4((vec3(HSV(texel.rgb))), 1.0); }else if(HSLL== true){ gl_FragColor = vec4((vec3(HSL(texel.rgb))), 1.0); }else if(Tint == true){ gl_FragColor = vec4(Ftint(texel.r,colorT.x),Ftint(texel.g,colorT.y),Ftint(texel.b,colorT.z),1.0); }else{ gl_FragColor = texel; } } Referencias:\n[Speeding Up tint() in p5]: https://www.davepagurek.com/blog/p5-tint/ [HSL \u0026amp; HSV]: https://en.wikipedia.org/wiki/HSL_and_HSV#Disadvantages [Blend Modes]: https://en.wikipedia.org/wiki/Blend_modes#Overlay [P5.js]: https://p5js.org/es/reference/ "}]