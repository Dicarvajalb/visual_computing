<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Showcase Template</title><link>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-1/Ilusiones/</link><description>Recent content on Showcase Template</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-1/Ilusiones/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-1/Ilusiones/BindingMovement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-1/Ilusiones/BindingMovement/</guid><description>Movimiento Enlazado # Problem statement # La presente ilusión muestra 4 líneas aparentemente moviéndose de forma independiente, sin embargo, al revisarlas de forma extensiva se puede notar que se mueven en pares ordenados paralelos. La figura que describe este movimiento corresponde a un rombo el cual posee sus vértices ocultos;
Al hacer que los vértices sean visibles se puede notar como el tenerlos ocultos crea el movimiento ilusorio.
¿Como interactuar con la ilusión?</description></item><item><title/><link>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-1/Ilusiones/SKE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-1/Ilusiones/SKE/</guid><description>Efecto esteroquinético # Problem statement # El efecto esteroquinético es una ilusión visual de la profundidad. Es un efecto ilusorio que depende del movimiento. Se basa en que la rotación de figuras adecuadas crea una ilusión tridimensional
Code # Pasos dentro del código:
Dibujar el primer circulo Iterar por cada círculo definiendo su rotación y su posición. source code let angle = 0; let speed = 0.05; let circleColor = true; function setup() { createCanvas(400, 400); } function draw() { background(220); angle += speed; strokeWeight(1) circle(200,200,400); cirrcle(375) } function cirrcle(size){ fill(255,255,0) if(circleColor){ fill(0,0,255) } circleColor = !</description></item></channel></rss>