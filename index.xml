<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Grupo de estudio</title><link>https://dicarvajalb.github.io/visual_computing/</link><description>Recent content in Introduction on Grupo de estudio</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://dicarvajalb.github.io/visual_computing/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a New Theme</title><link>https://dicarvajalb.github.io/visual_computing/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://dicarvajalb.github.io/visual_computing/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://dicarvajalb.github.io/visual_computing/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://dicarvajalb.github.io/visual_computing/posts/migrate-from-jekyll/</guid><description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>https://dicarvajalb.github.io/visual_computing/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://dicarvajalb.github.io/visual_computing/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>https://dicarvajalb.github.io/visual_computing/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://dicarvajalb.github.io/visual_computing/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description></item><item><title/><link>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-1/Convoluciones/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-1/Convoluciones/</guid><description>1. Convoluciones # Problem statement # Una convolucion sobre una imagen es un calculo matematico sobre un conjunto de pixeles sobre la misma, esta operacion hace uso de los denominados Kernel; Un kernel es una matriz con valores determinados los cuales permiten aplicar diferentes mascaras sobre las imagenes, los valores dentro de las matrices de los kernel se pueden alterar con base en el resultado que se desee obtener se pueden modificar.</description></item><item><title/><link>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-1/Histograma/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-1/Histograma/</guid><description>Histograma # Problem statement # Un histograma de imagen es una representación gráfica de la distribución tonal en una imagen digital. Para esto traza el número de píxeles para cada valor tonal de manera que al mirar el histograma de una imagen específica, un espectador podrá juzgar la distribución tonal completa de un vistazo.
Tiene muchos usos entre ellos sirve dar al fotógrafo una mejor comprensión de los valores de brillo en una imagen.</description></item><item><title/><link>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-1/Ilusiones/BindingMovement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-1/Ilusiones/BindingMovement/</guid><description>Movimiento Enlazado # Problem statement # La presente ilusión muestra 4 líneas aparentemente moviéndose de forma independiente, sin embargo, al revisarlas de forma extensiva se puede notar que se mueven en pares ordenados paralelos. La figura que describe este movimiento corresponde a un rombo el cual posee sus vértices ocultos;
Al hacer que los vértices sean visibles se puede notar como el tenerlos ocultos crea el movimiento ilusorio.
¿Como interactuar con la ilusión?</description></item><item><title/><link>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-1/Ilusiones/SKE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-1/Ilusiones/SKE/</guid><description>Efecto esteroquinético # Problem statement # El efecto esteroquinético es una ilusión visual de la profundidad. Es un efecto ilusorio que depende del movimiento. Se basa en que la rotación de figuras adecuadas crea una ilusión tridimensional
Code # Pasos dentro del código:
Dibujar el primer circulo Iterar por cada círculo definiendo su rotación y su posición. source code let angle = 0; let speed = 0.05; let circleColor = true; function setup() { createCanvas(400, 400); } function draw() { background(220); angle += speed; strokeWeight(1) circle(200,200,400); cirrcle(375) } function cirrcle(size){ fill(255,255,0) if(circleColor){ fill(0,0,255) } circleColor = !</description></item><item><title/><link>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-1/Ilusiones/SteppingFeet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-1/Ilusiones/SteppingFeet/</guid><description>Paso a paso # Problem statement # Tambien llamada Stepping feet, es una ilusión visual de percepción de movimiento. Esta muestra dos pies, uno azul y otro amarillo, que se mueven horizontalmente a través de un paisaje que consta de rayas blancas y negras. Aunque ambos pies se mueven a una velocidad constante, su velocidad percibida es distinta.
¿Como interactuar con la ilusión?
Para cambiar la velocidad de las figuras se usa el primer slider, para cambiar la relación baras/pie se usa el segundo slider y para mover o detener los pies se debe clickear la casilla de move.</description></item><item><title/><link>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-1/Lightness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-1/Lightness/</guid><description>Lightness # Problem statement # Sería útil tener una herramienta que permita la manipulación de luminosidad de una imagen, y de esta manera poder aclarar imágenes oscuras para poder ver sus siluetas.
Background # Manipulación de pixeles usando P5.js Uso de HSL Conversión entre HSL y RGB Code # Pasos dentro del código:
Cargar la imagen a manipular y el botón de rango Dado un valor en el botón de rango, se aumenta la luminosidad de cada pixel en la imagen.</description></item><item><title/><link>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-1/Multiplicacion-RGB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-1/Multiplicacion-RGB/</guid><description>Multiplicación RGB # Problem statement # ¿Qué sucede si multiplicamos dos colores RGB?
Code # Pasos dentro del código:
Obtener los 2 valores RGB de la paleta Calcular su multiplicación y mostrarla en pantalla source code let backgroundColor; let color1, color2 function setup() { createCanvas(200, 200); let c1 = createInput(&amp;#34;0,0,0&amp;#34;,&amp;#39;color&amp;#39;) let c2 = createInput(&amp;#34;0,0,0&amp;#34;,&amp;#39;color&amp;#39;) c1.input(()=&amp;gt; setColor1(c1,c2)) c2.input(()=&amp;gt; setColor1(c1,c2)) } function setColor1(c1,c2){ let color1 = color(red(c1.value()), green(c1.value()), blue(c1.value())) let black = color(0,0,0) fill(color1) rect(0,0, 130,130) let color2 = color(red(c2.</description></item><item><title/><link>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-2/Aplicacion-3-D/Laberinto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-2/Aplicacion-3-D/Laberinto/</guid><description>Laberinto 3-D # Problema # Implemente una aplicacion 3D con WebGL. Puede usar la libreria p5.treegl o cualquier otra libreria necesaria.
Introduccion # Un laberinto es un lugar compuesto por un conjunto de calles y encrucijadas con una disposicion compleja. El Objetivo de los laberintos es confudir a quienes se adentren dentro del mismo. Historicamente, los laberintos han sido mencionados en la mitologia como retos para los heroes [&amp;ldquo;El laberinto de Creta&amp;rdquo;] asi mismo como una representacion artistica para la inteligencia y destreza.</description></item><item><title/><link>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-2/Aplicacion-3-D/LaberintoP2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-2/Aplicacion-3-D/LaberintoP2/</guid><description>Parte 2 # Colisiones y Creacion: Tomando lo creado en los ejercicios anteriores se crea un laberinto sencillo por el cual la esfera pueda desplazarse, se trata de simular fisicas como fuerzas Newtonianas para dar realismo a la aplicacion. ¿Como interactuar con el plano? Para cambiar la inclinacion debe deslizar el mouse presionando el boton de click derecho sobre el Canvas, la esfera puede salirse del plano y del area visible por lo cual puede usar el slider para ajustar el zoom o el boton central del mouse.</description></item><item><title/><link>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-2/Rasterizacion/Midpoint-Circle-Algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-2/Rasterizacion/Midpoint-Circle-Algorithm/</guid><description>Midpoint Circle Algorithm # El algoritmo de dibujo de círculo de punto medio es un algoritmo utilizado para determinar los puntos necesarios para rasterizar un círculo.
Usamos el algoritmo del punto medio para calcular todos los puntos del perímetro del círculo en el primer octante y luego los imprimimos junto con sus puntos de espejo en los otros octantes. Esto funcionará porque un círculo es simétrico con respecto a su centro.</description></item><item><title/><link>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-2/Rasterizacion/Triangle-Rasterization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dicarvajalb.github.io/visual_computing/docs/shortcodes/Taller-2/Rasterizacion/Triangle-Rasterization/</guid><description>Triangle rasterization # La rasterización es el proceso por el cual una imagen se transforma en un conjunto de pixeles, los cuales pueden ser mostrados a traves de una salida digital. Este procedimiento incluye el uso de diferentes algoritmos dependiendo de la figura que se vaya a rasterizar.
Por ejemplo para razterizar un triangulo se necesita el desarrollo de dos pasos:
Capturar su figura Recorrer su figura a traves de los pixeles Para el primer paso es necesario verificar si el triangulo encaja en alguna de las siguientes opciones:</description></item></channel></rss>